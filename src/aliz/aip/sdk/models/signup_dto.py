# coding: utf-8

"""
    Aliz AIP REST API

    AIP Workspace API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: aip-support@aliz.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SignupDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'company_name': 'str',
        'phone': 'str',
        'github_user': 'str',
        'reason_of_trial': 'str'
    }

    attribute_map = {
        'name': 'name',
        'company_name': 'companyName',
        'phone': 'phone',
        'github_user': 'githubUser',
        'reason_of_trial': 'reasonOfTrial'
    }

    def __init__(self, name=None, company_name=None, phone=None, github_user=None, reason_of_trial=None):  # noqa: E501
        """SignupDto - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._company_name = None
        self._phone = None
        self._github_user = None
        self._reason_of_trial = None
        self.discriminator = None
        self.name = name
        self.company_name = company_name
        self.phone = phone
        self.github_user = github_user
        self.reason_of_trial = reason_of_trial

    @property
    def name(self):
        """Gets the name of this SignupDto.  # noqa: E501


        :return: The name of this SignupDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SignupDto.


        :param name: The name of this SignupDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def company_name(self):
        """Gets the company_name of this SignupDto.  # noqa: E501


        :return: The company_name of this SignupDto.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this SignupDto.


        :param company_name: The company_name of this SignupDto.  # noqa: E501
        :type: str
        """
        if company_name is None:
            raise ValueError("Invalid value for `company_name`, must not be `None`")  # noqa: E501

        self._company_name = company_name

    @property
    def phone(self):
        """Gets the phone of this SignupDto.  # noqa: E501


        :return: The phone of this SignupDto.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this SignupDto.


        :param phone: The phone of this SignupDto.  # noqa: E501
        :type: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")  # noqa: E501

        self._phone = phone

    @property
    def github_user(self):
        """Gets the github_user of this SignupDto.  # noqa: E501


        :return: The github_user of this SignupDto.  # noqa: E501
        :rtype: str
        """
        return self._github_user

    @github_user.setter
    def github_user(self, github_user):
        """Sets the github_user of this SignupDto.


        :param github_user: The github_user of this SignupDto.  # noqa: E501
        :type: str
        """
        if github_user is None:
            raise ValueError("Invalid value for `github_user`, must not be `None`")  # noqa: E501

        self._github_user = github_user

    @property
    def reason_of_trial(self):
        """Gets the reason_of_trial of this SignupDto.  # noqa: E501


        :return: The reason_of_trial of this SignupDto.  # noqa: E501
        :rtype: str
        """
        return self._reason_of_trial

    @reason_of_trial.setter
    def reason_of_trial(self, reason_of_trial):
        """Sets the reason_of_trial of this SignupDto.


        :param reason_of_trial: The reason_of_trial of this SignupDto.  # noqa: E501
        :type: str
        """
        if reason_of_trial is None:
            raise ValueError("Invalid value for `reason_of_trial`, must not be `None`")  # noqa: E501

        self._reason_of_trial = reason_of_trial

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SignupDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SignupDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

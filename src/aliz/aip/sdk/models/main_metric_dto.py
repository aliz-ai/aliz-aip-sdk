# coding: utf-8

"""
    Aliz AIP REST API

    AIP Workspace API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: aip-support@aliz.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MainMetricDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model_id': 'str',
        'main_metric': 'str',
        'current_value': 'float',
        'change': 'float',
        'metrics': 'list[MetricValueDto]'
    }

    attribute_map = {
        'model_id': 'modelId',
        'main_metric': 'mainMetric',
        'current_value': 'currentValue',
        'change': 'change',
        'metrics': 'metrics'
    }

    def __init__(self, model_id=None, main_metric=None, current_value=None, change=None, metrics=None):  # noqa: E501
        """MainMetricDto - a model defined in Swagger"""  # noqa: E501
        self._model_id = None
        self._main_metric = None
        self._current_value = None
        self._change = None
        self._metrics = None
        self.discriminator = None
        if model_id is not None:
            self.model_id = model_id
        if main_metric is not None:
            self.main_metric = main_metric
        if current_value is not None:
            self.current_value = current_value
        if change is not None:
            self.change = change
        if metrics is not None:
            self.metrics = metrics

    @property
    def model_id(self):
        """Gets the model_id of this MainMetricDto.  # noqa: E501


        :return: The model_id of this MainMetricDto.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this MainMetricDto.


        :param model_id: The model_id of this MainMetricDto.  # noqa: E501
        :type: str
        """

        self._model_id = model_id

    @property
    def main_metric(self):
        """Gets the main_metric of this MainMetricDto.  # noqa: E501


        :return: The main_metric of this MainMetricDto.  # noqa: E501
        :rtype: str
        """
        return self._main_metric

    @main_metric.setter
    def main_metric(self, main_metric):
        """Sets the main_metric of this MainMetricDto.


        :param main_metric: The main_metric of this MainMetricDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["MSE", "AUC"]  # noqa: E501
        if main_metric not in allowed_values:
            raise ValueError(
                "Invalid value for `main_metric` ({0}), must be one of {1}"  # noqa: E501
                .format(main_metric, allowed_values)
            )

        self._main_metric = main_metric

    @property
    def current_value(self):
        """Gets the current_value of this MainMetricDto.  # noqa: E501


        :return: The current_value of this MainMetricDto.  # noqa: E501
        :rtype: float
        """
        return self._current_value

    @current_value.setter
    def current_value(self, current_value):
        """Sets the current_value of this MainMetricDto.


        :param current_value: The current_value of this MainMetricDto.  # noqa: E501
        :type: float
        """

        self._current_value = current_value

    @property
    def change(self):
        """Gets the change of this MainMetricDto.  # noqa: E501


        :return: The change of this MainMetricDto.  # noqa: E501
        :rtype: float
        """
        return self._change

    @change.setter
    def change(self, change):
        """Sets the change of this MainMetricDto.


        :param change: The change of this MainMetricDto.  # noqa: E501
        :type: float
        """

        self._change = change

    @property
    def metrics(self):
        """Gets the metrics of this MainMetricDto.  # noqa: E501


        :return: The metrics of this MainMetricDto.  # noqa: E501
        :rtype: list[MetricValueDto]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this MainMetricDto.


        :param metrics: The metrics of this MainMetricDto.  # noqa: E501
        :type: list[MetricValueDto]
        """

        self._metrics = metrics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MainMetricDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MainMetricDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

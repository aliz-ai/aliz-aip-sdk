# coding: utf-8

"""
    Aliz AIP REST API

    AIP Workspace API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: aip-support@aliz.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AuthorizationDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'principal_type': 'str',
        'principal_id': 'str',
        'roles': 'list[RoleDto]'
    }

    attribute_map = {
        'id': 'id',
        'principal_type': 'principalType',
        'principal_id': 'principalId',
        'roles': 'roles'
    }

    def __init__(self, id=None, principal_type=None, principal_id=None, roles=None):  # noqa: E501
        """AuthorizationDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._principal_type = None
        self._principal_id = None
        self._roles = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if principal_type is not None:
            self.principal_type = principal_type
        if principal_id is not None:
            self.principal_id = principal_id
        if roles is not None:
            self.roles = roles

    @property
    def id(self):
        """Gets the id of this AuthorizationDto.  # noqa: E501


        :return: The id of this AuthorizationDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuthorizationDto.


        :param id: The id of this AuthorizationDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def principal_type(self):
        """Gets the principal_type of this AuthorizationDto.  # noqa: E501


        :return: The principal_type of this AuthorizationDto.  # noqa: E501
        :rtype: str
        """
        return self._principal_type

    @principal_type.setter
    def principal_type(self, principal_type):
        """Sets the principal_type of this AuthorizationDto.


        :param principal_type: The principal_type of this AuthorizationDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["EMAIL", "SERVICE_ACCOUNT", "GROUP", "DOMAIN"]  # noqa: E501
        if principal_type not in allowed_values:
            raise ValueError(
                "Invalid value for `principal_type` ({0}), must be one of {1}"  # noqa: E501
                .format(principal_type, allowed_values)
            )

        self._principal_type = principal_type

    @property
    def principal_id(self):
        """Gets the principal_id of this AuthorizationDto.  # noqa: E501


        :return: The principal_id of this AuthorizationDto.  # noqa: E501
        :rtype: str
        """
        return self._principal_id

    @principal_id.setter
    def principal_id(self, principal_id):
        """Sets the principal_id of this AuthorizationDto.


        :param principal_id: The principal_id of this AuthorizationDto.  # noqa: E501
        :type: str
        """

        self._principal_id = principal_id

    @property
    def roles(self):
        """Gets the roles of this AuthorizationDto.  # noqa: E501


        :return: The roles of this AuthorizationDto.  # noqa: E501
        :rtype: list[RoleDto]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this AuthorizationDto.


        :param roles: The roles of this AuthorizationDto.  # noqa: E501
        :type: list[RoleDto]
        """

        self._roles = roles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthorizationDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthorizationDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

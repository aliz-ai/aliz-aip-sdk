# coding: utf-8

"""
    Aliz AIP REST API

    AIP Workspace API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: aip-support@aliz.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TemplateVersion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'version': 'str',
        'terraform_version': 'str',
        'release_date': 'datetime',
        'branch': 'str'
    }

    attribute_map = {
        'id': 'id',
        'version': 'version',
        'terraform_version': 'terraformVersion',
        'release_date': 'releaseDate',
        'branch': 'branch'
    }

    def __init__(self, id=None, version=None, terraform_version=None, release_date=None, branch=None):  # noqa: E501
        """TemplateVersion - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._version = None
        self._terraform_version = None
        self._release_date = None
        self._branch = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if version is not None:
            self.version = version
        if terraform_version is not None:
            self.terraform_version = terraform_version
        self.release_date = release_date
        self.branch = branch

    @property
    def id(self):
        """Gets the id of this TemplateVersion.  # noqa: E501

        Template Version ID.  # noqa: E501

        :return: The id of this TemplateVersion.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TemplateVersion.

        Template Version ID.  # noqa: E501

        :param id: The id of this TemplateVersion.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def version(self):
        """Gets the version of this TemplateVersion.  # noqa: E501

        Template version.  # noqa: E501

        :return: The version of this TemplateVersion.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TemplateVersion.

        Template version.  # noqa: E501

        :param version: The version of this TemplateVersion.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def terraform_version(self):
        """Gets the terraform_version of this TemplateVersion.  # noqa: E501

        Terraform version.  # noqa: E501

        :return: The terraform_version of this TemplateVersion.  # noqa: E501
        :rtype: str
        """
        return self._terraform_version

    @terraform_version.setter
    def terraform_version(self, terraform_version):
        """Sets the terraform_version of this TemplateVersion.

        Terraform version.  # noqa: E501

        :param terraform_version: The terraform_version of this TemplateVersion.  # noqa: E501
        :type: str
        """
        allowed_values = ["v013", "v109"]  # noqa: E501
        if terraform_version not in allowed_values:
            raise ValueError(
                "Invalid value for `terraform_version` ({0}), must be one of {1}"  # noqa: E501
                .format(terraform_version, allowed_values)
            )

        self._terraform_version = terraform_version

    @property
    def release_date(self):
        """Gets the release_date of this TemplateVersion.  # noqa: E501

        Release date of this version.  # noqa: E501

        :return: The release_date of this TemplateVersion.  # noqa: E501
        :rtype: datetime
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this TemplateVersion.

        Release date of this version.  # noqa: E501

        :param release_date: The release_date of this TemplateVersion.  # noqa: E501
        :type: datetime
        """
        if release_date is None:
            raise ValueError("Invalid value for `release_date`, must not be `None`")  # noqa: E501

        self._release_date = release_date

    @property
    def branch(self):
        """Gets the branch of this TemplateVersion.  # noqa: E501

        Branch of this version  # noqa: E501

        :return: The branch of this TemplateVersion.  # noqa: E501
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this TemplateVersion.

        Branch of this version  # noqa: E501

        :param branch: The branch of this TemplateVersion.  # noqa: E501
        :type: str
        """
        if branch is None:
            raise ValueError("Invalid value for `branch`, must not be `None`")  # noqa: E501

        self._branch = branch

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TemplateVersion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TemplateVersion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

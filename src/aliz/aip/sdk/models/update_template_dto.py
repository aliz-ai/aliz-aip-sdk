# coding: utf-8

"""
    Aliz AIP REST API

    AIP Workspace API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: aip-support@aliz.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateTemplateDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'terraform_script_directory': 'str',
        'terraform_env_directory': 'str',
        'versions': 'list[TemplateVersion]',
        'template_categories': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'terraform_script_directory': 'terraformScriptDirectory',
        'terraform_env_directory': 'terraformEnvDirectory',
        'versions': 'versions',
        'template_categories': 'templateCategories'
    }

    def __init__(self, name=None, description=None, terraform_script_directory=None, terraform_env_directory=None, versions=None, template_categories=None):  # noqa: E501
        """UpdateTemplateDto - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._terraform_script_directory = None
        self._terraform_env_directory = None
        self._versions = None
        self._template_categories = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if terraform_script_directory is not None:
            self.terraform_script_directory = terraform_script_directory
        if terraform_env_directory is not None:
            self.terraform_env_directory = terraform_env_directory
        if versions is not None:
            self.versions = versions
        if template_categories is not None:
            self.template_categories = template_categories

    @property
    def name(self):
        """Gets the name of this UpdateTemplateDto.  # noqa: E501


        :return: The name of this UpdateTemplateDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateTemplateDto.


        :param name: The name of this UpdateTemplateDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this UpdateTemplateDto.  # noqa: E501


        :return: The description of this UpdateTemplateDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateTemplateDto.


        :param description: The description of this UpdateTemplateDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def terraform_script_directory(self):
        """Gets the terraform_script_directory of this UpdateTemplateDto.  # noqa: E501


        :return: The terraform_script_directory of this UpdateTemplateDto.  # noqa: E501
        :rtype: str
        """
        return self._terraform_script_directory

    @terraform_script_directory.setter
    def terraform_script_directory(self, terraform_script_directory):
        """Sets the terraform_script_directory of this UpdateTemplateDto.


        :param terraform_script_directory: The terraform_script_directory of this UpdateTemplateDto.  # noqa: E501
        :type: str
        """

        self._terraform_script_directory = terraform_script_directory

    @property
    def terraform_env_directory(self):
        """Gets the terraform_env_directory of this UpdateTemplateDto.  # noqa: E501


        :return: The terraform_env_directory of this UpdateTemplateDto.  # noqa: E501
        :rtype: str
        """
        return self._terraform_env_directory

    @terraform_env_directory.setter
    def terraform_env_directory(self, terraform_env_directory):
        """Sets the terraform_env_directory of this UpdateTemplateDto.


        :param terraform_env_directory: The terraform_env_directory of this UpdateTemplateDto.  # noqa: E501
        :type: str
        """

        self._terraform_env_directory = terraform_env_directory

    @property
    def versions(self):
        """Gets the versions of this UpdateTemplateDto.  # noqa: E501


        :return: The versions of this UpdateTemplateDto.  # noqa: E501
        :rtype: list[TemplateVersion]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this UpdateTemplateDto.


        :param versions: The versions of this UpdateTemplateDto.  # noqa: E501
        :type: list[TemplateVersion]
        """

        self._versions = versions

    @property
    def template_categories(self):
        """Gets the template_categories of this UpdateTemplateDto.  # noqa: E501


        :return: The template_categories of this UpdateTemplateDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._template_categories

    @template_categories.setter
    def template_categories(self, template_categories):
        """Sets the template_categories of this UpdateTemplateDto.


        :param template_categories: The template_categories of this UpdateTemplateDto.  # noqa: E501
        :type: list[str]
        """

        self._template_categories = template_categories

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateTemplateDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateTemplateDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

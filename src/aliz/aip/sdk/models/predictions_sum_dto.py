# coding: utf-8

"""
    Aliz AIP REST API

    AIP Workspace API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: aip-support@aliz.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PredictionsSumDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pred_sum': 'list[MetricValueDto]',
        'actual_sum': 'list[MetricValueDto]',
        'diff': 'list[MetricValueDto]'
    }

    attribute_map = {
        'pred_sum': 'predSum',
        'actual_sum': 'actualSum',
        'diff': 'diff'
    }

    def __init__(self, pred_sum=None, actual_sum=None, diff=None):  # noqa: E501
        """PredictionsSumDto - a model defined in Swagger"""  # noqa: E501
        self._pred_sum = None
        self._actual_sum = None
        self._diff = None
        self.discriminator = None
        if pred_sum is not None:
            self.pred_sum = pred_sum
        if actual_sum is not None:
            self.actual_sum = actual_sum
        if diff is not None:
            self.diff = diff

    @property
    def pred_sum(self):
        """Gets the pred_sum of this PredictionsSumDto.  # noqa: E501


        :return: The pred_sum of this PredictionsSumDto.  # noqa: E501
        :rtype: list[MetricValueDto]
        """
        return self._pred_sum

    @pred_sum.setter
    def pred_sum(self, pred_sum):
        """Sets the pred_sum of this PredictionsSumDto.


        :param pred_sum: The pred_sum of this PredictionsSumDto.  # noqa: E501
        :type: list[MetricValueDto]
        """

        self._pred_sum = pred_sum

    @property
    def actual_sum(self):
        """Gets the actual_sum of this PredictionsSumDto.  # noqa: E501


        :return: The actual_sum of this PredictionsSumDto.  # noqa: E501
        :rtype: list[MetricValueDto]
        """
        return self._actual_sum

    @actual_sum.setter
    def actual_sum(self, actual_sum):
        """Sets the actual_sum of this PredictionsSumDto.


        :param actual_sum: The actual_sum of this PredictionsSumDto.  # noqa: E501
        :type: list[MetricValueDto]
        """

        self._actual_sum = actual_sum

    @property
    def diff(self):
        """Gets the diff of this PredictionsSumDto.  # noqa: E501


        :return: The diff of this PredictionsSumDto.  # noqa: E501
        :rtype: list[MetricValueDto]
        """
        return self._diff

    @diff.setter
    def diff(self, diff):
        """Sets the diff of this PredictionsSumDto.


        :param diff: The diff of this PredictionsSumDto.  # noqa: E501
        :type: list[MetricValueDto]
        """

        self._diff = diff

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PredictionsSumDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PredictionsSumDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

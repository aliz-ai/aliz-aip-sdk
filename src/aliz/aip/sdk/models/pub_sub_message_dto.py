# coding: utf-8

"""
    Aliz AIP REST API

    AIP Workspace API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: aip-support@aliz.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PubSubMessageDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message': 'MessageDto',
        'subscription': 'str',
        'cloud_build_dto': 'CloudBuildDto'
    }

    attribute_map = {
        'message': 'message',
        'subscription': 'subscription',
        'cloud_build_dto': 'cloudBuildDto'
    }

    def __init__(self, message=None, subscription=None, cloud_build_dto=None):  # noqa: E501
        """PubSubMessageDto - a model defined in Swagger"""  # noqa: E501
        self._message = None
        self._subscription = None
        self._cloud_build_dto = None
        self.discriminator = None
        if message is not None:
            self.message = message
        if subscription is not None:
            self.subscription = subscription
        if cloud_build_dto is not None:
            self.cloud_build_dto = cloud_build_dto

    @property
    def message(self):
        """Gets the message of this PubSubMessageDto.  # noqa: E501


        :return: The message of this PubSubMessageDto.  # noqa: E501
        :rtype: MessageDto
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this PubSubMessageDto.


        :param message: The message of this PubSubMessageDto.  # noqa: E501
        :type: MessageDto
        """

        self._message = message

    @property
    def subscription(self):
        """Gets the subscription of this PubSubMessageDto.  # noqa: E501


        :return: The subscription of this PubSubMessageDto.  # noqa: E501
        :rtype: str
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this PubSubMessageDto.


        :param subscription: The subscription of this PubSubMessageDto.  # noqa: E501
        :type: str
        """

        self._subscription = subscription

    @property
    def cloud_build_dto(self):
        """Gets the cloud_build_dto of this PubSubMessageDto.  # noqa: E501


        :return: The cloud_build_dto of this PubSubMessageDto.  # noqa: E501
        :rtype: CloudBuildDto
        """
        return self._cloud_build_dto

    @cloud_build_dto.setter
    def cloud_build_dto(self, cloud_build_dto):
        """Sets the cloud_build_dto of this PubSubMessageDto.


        :param cloud_build_dto: The cloud_build_dto of this PubSubMessageDto.  # noqa: E501
        :type: CloudBuildDto
        """

        self._cloud_build_dto = cloud_build_dto

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PubSubMessageDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PubSubMessageDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

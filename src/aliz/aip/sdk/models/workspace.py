# coding: utf-8

"""
    Aliz AIP REST API

    AIP Workspace API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: aip-support@aliz.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Workspace(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'domain_id': 'str',
        'type': 'str',
        'children': 'list[ResourceDto]',
        'description': 'str',
        'created_by_id': 'str',
        'created_at': 'datetime',
        'last_modified_by_id': 'str',
        'last_modified_at': 'datetime',
        'projects': 'list[ProjectDto]',
        'budgets': 'list[BudgetDto]',
        'deleted': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'domain_id': 'domainId',
        'type': 'type',
        'children': 'children',
        'description': 'description',
        'created_by_id': 'createdById',
        'created_at': 'createdAt',
        'last_modified_by_id': 'lastModifiedById',
        'last_modified_at': 'lastModifiedAt',
        'projects': 'projects',
        'budgets': 'budgets',
        'deleted': 'deleted'
    }

    def __init__(self, id=None, name=None, domain_id=None, type=None, children=None, description=None, created_by_id=None, created_at=None, last_modified_by_id=None, last_modified_at=None, projects=None, budgets=None, deleted=None):  # noqa: E501
        """Workspace - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._domain_id = None
        self._type = None
        self._children = None
        self._description = None
        self._created_by_id = None
        self._created_at = None
        self._last_modified_by_id = None
        self._last_modified_at = None
        self._projects = None
        self._budgets = None
        self._deleted = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if domain_id is not None:
            self.domain_id = domain_id
        if type is not None:
            self.type = type
        if children is not None:
            self.children = children
        if description is not None:
            self.description = description
        if created_by_id is not None:
            self.created_by_id = created_by_id
        if created_at is not None:
            self.created_at = created_at
        if last_modified_by_id is not None:
            self.last_modified_by_id = last_modified_by_id
        if last_modified_at is not None:
            self.last_modified_at = last_modified_at
        if projects is not None:
            self.projects = projects
        if budgets is not None:
            self.budgets = budgets
        if deleted is not None:
            self.deleted = deleted

    @property
    def id(self):
        """Gets the id of this Workspace.  # noqa: E501


        :return: The id of this Workspace.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Workspace.


        :param id: The id of this Workspace.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Workspace.  # noqa: E501


        :return: The name of this Workspace.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Workspace.


        :param name: The name of this Workspace.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def domain_id(self):
        """Gets the domain_id of this Workspace.  # noqa: E501


        :return: The domain_id of this Workspace.  # noqa: E501
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this Workspace.


        :param domain_id: The domain_id of this Workspace.  # noqa: E501
        :type: str
        """

        self._domain_id = domain_id

    @property
    def type(self):
        """Gets the type of this Workspace.  # noqa: E501


        :return: The type of this Workspace.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Workspace.


        :param type: The type of this Workspace.  # noqa: E501
        :type: str
        """
        allowed_values = ["DOMAIN", "FOLDER", "WORKSPACE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def children(self):
        """Gets the children of this Workspace.  # noqa: E501


        :return: The children of this Workspace.  # noqa: E501
        :rtype: list[ResourceDto]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this Workspace.


        :param children: The children of this Workspace.  # noqa: E501
        :type: list[ResourceDto]
        """

        self._children = children

    @property
    def description(self):
        """Gets the description of this Workspace.  # noqa: E501

        Description for the workspace.  # noqa: E501

        :return: The description of this Workspace.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Workspace.

        Description for the workspace.  # noqa: E501

        :param description: The description of this Workspace.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def created_by_id(self):
        """Gets the created_by_id of this Workspace.  # noqa: E501

        User ID of the one who created the workspace. Should not be set when creating the workspace.  # noqa: E501

        :return: The created_by_id of this Workspace.  # noqa: E501
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this Workspace.

        User ID of the one who created the workspace. Should not be set when creating the workspace.  # noqa: E501

        :param created_by_id: The created_by_id of this Workspace.  # noqa: E501
        :type: str
        """

        self._created_by_id = created_by_id

    @property
    def created_at(self):
        """Gets the created_at of this Workspace.  # noqa: E501

        Date-time of the workspace creation. Should not be set when creating the workspace.  # noqa: E501

        :return: The created_at of this Workspace.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Workspace.

        Date-time of the workspace creation. Should not be set when creating the workspace.  # noqa: E501

        :param created_at: The created_at of this Workspace.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def last_modified_by_id(self):
        """Gets the last_modified_by_id of this Workspace.  # noqa: E501

        User ID of the one who edited the workspace for the last time. Should not be set when creating/editing the workspace.  # noqa: E501

        :return: The last_modified_by_id of this Workspace.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by_id

    @last_modified_by_id.setter
    def last_modified_by_id(self, last_modified_by_id):
        """Sets the last_modified_by_id of this Workspace.

        User ID of the one who edited the workspace for the last time. Should not be set when creating/editing the workspace.  # noqa: E501

        :param last_modified_by_id: The last_modified_by_id of this Workspace.  # noqa: E501
        :type: str
        """

        self._last_modified_by_id = last_modified_by_id

    @property
    def last_modified_at(self):
        """Gets the last_modified_at of this Workspace.  # noqa: E501

        Date-time of the last workspace editing. Should not be set when creating/editing the workspace.  # noqa: E501

        :return: The last_modified_at of this Workspace.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_at

    @last_modified_at.setter
    def last_modified_at(self, last_modified_at):
        """Sets the last_modified_at of this Workspace.

        Date-time of the last workspace editing. Should not be set when creating/editing the workspace.  # noqa: E501

        :param last_modified_at: The last_modified_at of this Workspace.  # noqa: E501
        :type: datetime
        """

        self._last_modified_at = last_modified_at

    @property
    def projects(self):
        """Gets the projects of this Workspace.  # noqa: E501

        GCP projects managed in this workspace.  # noqa: E501

        :return: The projects of this Workspace.  # noqa: E501
        :rtype: list[ProjectDto]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this Workspace.

        GCP projects managed in this workspace.  # noqa: E501

        :param projects: The projects of this Workspace.  # noqa: E501
        :type: list[ProjectDto]
        """

        self._projects = projects

    @property
    def budgets(self):
        """Gets the budgets of this Workspace.  # noqa: E501

        Budgets associated with the workspace.  # noqa: E501

        :return: The budgets of this Workspace.  # noqa: E501
        :rtype: list[BudgetDto]
        """
        return self._budgets

    @budgets.setter
    def budgets(self, budgets):
        """Sets the budgets of this Workspace.

        Budgets associated with the workspace.  # noqa: E501

        :param budgets: The budgets of this Workspace.  # noqa: E501
        :type: list[BudgetDto]
        """

        self._budgets = budgets

    @property
    def deleted(self):
        """Gets the deleted of this Workspace.  # noqa: E501


        :return: The deleted of this Workspace.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Workspace.


        :param deleted: The deleted of this Workspace.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Workspace, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Workspace):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Aliz AIP REST API

    AIP Workspace API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: aip-support@aliz.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Task(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'task_type': 'str',
        'task_name': 'str',
        'description': 'str',
        'is_taken_by_me': 'bool',
        'assignable': 'bool',
        'task_status': 'str',
        'workspace': 'Workspace',
        'meta_data': 'str',
        'assigned_users': 'list[str]',
        'reference_id': 'str',
        'done_by': 'str',
        'created_by_id': 'str',
        'created_by_name': 'str',
        'created_at': 'datetime',
        'last_modified_by_id': 'str',
        'last_modified_at': 'datetime',
        'done': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'task_type': 'taskType',
        'task_name': 'taskName',
        'description': 'description',
        'is_taken_by_me': 'isTakenByMe',
        'assignable': 'assignable',
        'task_status': 'taskStatus',
        'workspace': 'workspace',
        'meta_data': 'metaData',
        'assigned_users': 'assignedUsers',
        'reference_id': 'referenceId',
        'done_by': 'doneBy',
        'created_by_id': 'createdById',
        'created_by_name': 'createdByName',
        'created_at': 'createdAt',
        'last_modified_by_id': 'lastModifiedById',
        'last_modified_at': 'lastModifiedAt',
        'done': 'done'
    }

    def __init__(self, id=None, task_type=None, task_name=None, description=None, is_taken_by_me=None, assignable=None, task_status=None, workspace=None, meta_data=None, assigned_users=None, reference_id=None, done_by=None, created_by_id=None, created_by_name=None, created_at=None, last_modified_by_id=None, last_modified_at=None, done=None):  # noqa: E501
        """Task - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._task_type = None
        self._task_name = None
        self._description = None
        self._is_taken_by_me = None
        self._assignable = None
        self._task_status = None
        self._workspace = None
        self._meta_data = None
        self._assigned_users = None
        self._reference_id = None
        self._done_by = None
        self._created_by_id = None
        self._created_by_name = None
        self._created_at = None
        self._last_modified_by_id = None
        self._last_modified_at = None
        self._done = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.task_type = task_type
        if task_name is not None:
            self.task_name = task_name
        if description is not None:
            self.description = description
        if is_taken_by_me is not None:
            self.is_taken_by_me = is_taken_by_me
        if assignable is not None:
            self.assignable = assignable
        self.task_status = task_status
        if workspace is not None:
            self.workspace = workspace
        if meta_data is not None:
            self.meta_data = meta_data
        self.assigned_users = assigned_users
        if reference_id is not None:
            self.reference_id = reference_id
        if done_by is not None:
            self.done_by = done_by
        if created_by_id is not None:
            self.created_by_id = created_by_id
        if created_by_name is not None:
            self.created_by_name = created_by_name
        if created_at is not None:
            self.created_at = created_at
        if last_modified_by_id is not None:
            self.last_modified_by_id = last_modified_by_id
        if last_modified_at is not None:
            self.last_modified_at = last_modified_at
        if done is not None:
            self.done = done

    @property
    def id(self):
        """Gets the id of this Task.  # noqa: E501

        Task ID.  # noqa: E501

        :return: The id of this Task.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Task.

        Task ID.  # noqa: E501

        :param id: The id of this Task.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def task_type(self):
        """Gets the task_type of this Task.  # noqa: E501

        Task type.  # noqa: E501

        :return: The task_type of this Task.  # noqa: E501
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this Task.

        Task type.  # noqa: E501

        :param task_type: The task_type of this Task.  # noqa: E501
        :type: str
        """
        if task_type is None:
            raise ValueError("Invalid value for `task_type`, must not be `None`")  # noqa: E501
        allowed_values = ["PROVISIONING"]  # noqa: E501
        if task_type not in allowed_values:
            raise ValueError(
                "Invalid value for `task_type` ({0}), must be one of {1}"  # noqa: E501
                .format(task_type, allowed_values)
            )

        self._task_type = task_type

    @property
    def task_name(self):
        """Gets the task_name of this Task.  # noqa: E501

        Task name.  # noqa: E501

        :return: The task_name of this Task.  # noqa: E501
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name):
        """Sets the task_name of this Task.

        Task name.  # noqa: E501

        :param task_name: The task_name of this Task.  # noqa: E501
        :type: str
        """

        self._task_name = task_name

    @property
    def description(self):
        """Gets the description of this Task.  # noqa: E501

        Task description.  # noqa: E501

        :return: The description of this Task.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Task.

        Task description.  # noqa: E501

        :param description: The description of this Task.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_taken_by_me(self):
        """Gets the is_taken_by_me of this Task.  # noqa: E501

        Task is taken by me.  # noqa: E501

        :return: The is_taken_by_me of this Task.  # noqa: E501
        :rtype: bool
        """
        return self._is_taken_by_me

    @is_taken_by_me.setter
    def is_taken_by_me(self, is_taken_by_me):
        """Sets the is_taken_by_me of this Task.

        Task is taken by me.  # noqa: E501

        :param is_taken_by_me: The is_taken_by_me of this Task.  # noqa: E501
        :type: bool
        """

        self._is_taken_by_me = is_taken_by_me

    @property
    def assignable(self):
        """Gets the assignable of this Task.  # noqa: E501

        Task is assignable.  # noqa: E501

        :return: The assignable of this Task.  # noqa: E501
        :rtype: bool
        """
        return self._assignable

    @assignable.setter
    def assignable(self, assignable):
        """Sets the assignable of this Task.

        Task is assignable.  # noqa: E501

        :param assignable: The assignable of this Task.  # noqa: E501
        :type: bool
        """

        self._assignable = assignable

    @property
    def task_status(self):
        """Gets the task_status of this Task.  # noqa: E501

        Task status.  # noqa: E501

        :return: The task_status of this Task.  # noqa: E501
        :rtype: str
        """
        return self._task_status

    @task_status.setter
    def task_status(self, task_status):
        """Sets the task_status of this Task.

        Task status.  # noqa: E501

        :param task_status: The task_status of this Task.  # noqa: E501
        :type: str
        """
        if task_status is None:
            raise ValueError("Invalid value for `task_status`, must not be `None`")  # noqa: E501
        allowed_values = ["PENDING", "ASSIGNED", "REJECTED", "DONE"]  # noqa: E501
        if task_status not in allowed_values:
            raise ValueError(
                "Invalid value for `task_status` ({0}), must be one of {1}"  # noqa: E501
                .format(task_status, allowed_values)
            )

        self._task_status = task_status

    @property
    def workspace(self):
        """Gets the workspace of this Task.  # noqa: E501


        :return: The workspace of this Task.  # noqa: E501
        :rtype: Workspace
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace):
        """Sets the workspace of this Task.


        :param workspace: The workspace of this Task.  # noqa: E501
        :type: Workspace
        """

        self._workspace = workspace

    @property
    def meta_data(self):
        """Gets the meta_data of this Task.  # noqa: E501

        Task metadata.  # noqa: E501

        :return: The meta_data of this Task.  # noqa: E501
        :rtype: str
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this Task.

        Task metadata.  # noqa: E501

        :param meta_data: The meta_data of this Task.  # noqa: E501
        :type: str
        """

        self._meta_data = meta_data

    @property
    def assigned_users(self):
        """Gets the assigned_users of this Task.  # noqa: E501

        Assigned users.  # noqa: E501

        :return: The assigned_users of this Task.  # noqa: E501
        :rtype: list[str]
        """
        return self._assigned_users

    @assigned_users.setter
    def assigned_users(self, assigned_users):
        """Sets the assigned_users of this Task.

        Assigned users.  # noqa: E501

        :param assigned_users: The assigned_users of this Task.  # noqa: E501
        :type: list[str]
        """
        if assigned_users is None:
            raise ValueError("Invalid value for `assigned_users`, must not be `None`")  # noqa: E501

        self._assigned_users = assigned_users

    @property
    def reference_id(self):
        """Gets the reference_id of this Task.  # noqa: E501

        Reference id.  # noqa: E501

        :return: The reference_id of this Task.  # noqa: E501
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this Task.

        Reference id.  # noqa: E501

        :param reference_id: The reference_id of this Task.  # noqa: E501
        :type: str
        """

        self._reference_id = reference_id

    @property
    def done_by(self):
        """Gets the done_by of this Task.  # noqa: E501

        Is done by  # noqa: E501

        :return: The done_by of this Task.  # noqa: E501
        :rtype: str
        """
        return self._done_by

    @done_by.setter
    def done_by(self, done_by):
        """Sets the done_by of this Task.

        Is done by  # noqa: E501

        :param done_by: The done_by of this Task.  # noqa: E501
        :type: str
        """

        self._done_by = done_by

    @property
    def created_by_id(self):
        """Gets the created_by_id of this Task.  # noqa: E501

        User ID of the one who created the task. Should not be set when creating the task.  # noqa: E501

        :return: The created_by_id of this Task.  # noqa: E501
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this Task.

        User ID of the one who created the task. Should not be set when creating the task.  # noqa: E501

        :param created_by_id: The created_by_id of this Task.  # noqa: E501
        :type: str
        """

        self._created_by_id = created_by_id

    @property
    def created_by_name(self):
        """Gets the created_by_name of this Task.  # noqa: E501

        User name of the one who created the task. Should not be set when creating the task.  # noqa: E501

        :return: The created_by_name of this Task.  # noqa: E501
        :rtype: str
        """
        return self._created_by_name

    @created_by_name.setter
    def created_by_name(self, created_by_name):
        """Sets the created_by_name of this Task.

        User name of the one who created the task. Should not be set when creating the task.  # noqa: E501

        :param created_by_name: The created_by_name of this Task.  # noqa: E501
        :type: str
        """

        self._created_by_name = created_by_name

    @property
    def created_at(self):
        """Gets the created_at of this Task.  # noqa: E501

        Date-time of the task creation. Should not be set when creating the task.  # noqa: E501

        :return: The created_at of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Task.

        Date-time of the task creation. Should not be set when creating the task.  # noqa: E501

        :param created_at: The created_at of this Task.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def last_modified_by_id(self):
        """Gets the last_modified_by_id of this Task.  # noqa: E501

        User ID of the one who edited the task for the last time. Should not be set when creating/editing the task.  # noqa: E501

        :return: The last_modified_by_id of this Task.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by_id

    @last_modified_by_id.setter
    def last_modified_by_id(self, last_modified_by_id):
        """Sets the last_modified_by_id of this Task.

        User ID of the one who edited the task for the last time. Should not be set when creating/editing the task.  # noqa: E501

        :param last_modified_by_id: The last_modified_by_id of this Task.  # noqa: E501
        :type: str
        """

        self._last_modified_by_id = last_modified_by_id

    @property
    def last_modified_at(self):
        """Gets the last_modified_at of this Task.  # noqa: E501

        Date-time of the last task editing. Should not be set when creating/editing the task.  # noqa: E501

        :return: The last_modified_at of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_at

    @last_modified_at.setter
    def last_modified_at(self, last_modified_at):
        """Sets the last_modified_at of this Task.

        Date-time of the last task editing. Should not be set when creating/editing the task.  # noqa: E501

        :param last_modified_at: The last_modified_at of this Task.  # noqa: E501
        :type: datetime
        """

        self._last_modified_at = last_modified_at

    @property
    def done(self):
        """Gets the done of this Task.  # noqa: E501


        :return: The done of this Task.  # noqa: E501
        :rtype: bool
        """
        return self._done

    @done.setter
    def done(self, done):
        """Sets the done of this Task.


        :param done: The done of this Task.  # noqa: E501
        :type: bool
        """

        self._done = done

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Task, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Task):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

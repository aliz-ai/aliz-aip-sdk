# coding: utf-8

"""
    Aliz AIP REST API

    AIP Workspace API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: aip-support@aliz.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NotificationDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'notification_type': 'str',
        'percent': 'int',
        'url': 'str',
        'gcp_projects': 'list[ProjectDto]',
        'last_alert': 'datetime'
    }

    attribute_map = {
        'notification_type': 'notificationType',
        'percent': 'percent',
        'url': 'url',
        'gcp_projects': 'gcpProjects',
        'last_alert': 'lastAlert'
    }

    def __init__(self, notification_type=None, percent=None, url=None, gcp_projects=None, last_alert=None):  # noqa: E501
        """NotificationDto - a model defined in Swagger"""  # noqa: E501
        self._notification_type = None
        self._percent = None
        self._url = None
        self._gcp_projects = None
        self._last_alert = None
        self.discriminator = None
        if notification_type is not None:
            self.notification_type = notification_type
        if percent is not None:
            self.percent = percent
        if url is not None:
            self.url = url
        if gcp_projects is not None:
            self.gcp_projects = gcp_projects
        if last_alert is not None:
            self.last_alert = last_alert

    @property
    def notification_type(self):
        """Gets the notification_type of this NotificationDto.  # noqa: E501


        :return: The notification_type of this NotificationDto.  # noqa: E501
        :rtype: str
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this NotificationDto.


        :param notification_type: The notification_type of this NotificationDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["EMAIL", "WEBHOOK", "HARD_LIMIT"]  # noqa: E501
        if notification_type not in allowed_values:
            raise ValueError(
                "Invalid value for `notification_type` ({0}), must be one of {1}"  # noqa: E501
                .format(notification_type, allowed_values)
            )

        self._notification_type = notification_type

    @property
    def percent(self):
        """Gets the percent of this NotificationDto.  # noqa: E501


        :return: The percent of this NotificationDto.  # noqa: E501
        :rtype: int
        """
        return self._percent

    @percent.setter
    def percent(self, percent):
        """Sets the percent of this NotificationDto.


        :param percent: The percent of this NotificationDto.  # noqa: E501
        :type: int
        """

        self._percent = percent

    @property
    def url(self):
        """Gets the url of this NotificationDto.  # noqa: E501


        :return: The url of this NotificationDto.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NotificationDto.


        :param url: The url of this NotificationDto.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def gcp_projects(self):
        """Gets the gcp_projects of this NotificationDto.  # noqa: E501


        :return: The gcp_projects of this NotificationDto.  # noqa: E501
        :rtype: list[ProjectDto]
        """
        return self._gcp_projects

    @gcp_projects.setter
    def gcp_projects(self, gcp_projects):
        """Sets the gcp_projects of this NotificationDto.


        :param gcp_projects: The gcp_projects of this NotificationDto.  # noqa: E501
        :type: list[ProjectDto]
        """

        self._gcp_projects = gcp_projects

    @property
    def last_alert(self):
        """Gets the last_alert of this NotificationDto.  # noqa: E501


        :return: The last_alert of this NotificationDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_alert

    @last_alert.setter
    def last_alert(self, last_alert):
        """Sets the last_alert of this NotificationDto.


        :param last_alert: The last_alert of this NotificationDto.  # noqa: E501
        :type: datetime
        """

        self._last_alert = last_alert

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotificationDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

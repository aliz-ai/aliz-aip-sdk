# coding: utf-8

"""
    Aliz AIP REST API

    AIP Workspace API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: aip-support@aliz.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BudgetAlertDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created_at': 'datetime',
        'workspace_id': 'str',
        'budget_id': 'str',
        'budget_name': 'str',
        'notification_id': 'str',
        'alert_threshold_percent': 'int',
        'alert_threshold_value': 'float',
        'notification_type': 'str',
        'trigger_action_successful': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'createdAt',
        'workspace_id': 'workspaceId',
        'budget_id': 'budgetId',
        'budget_name': 'budgetName',
        'notification_id': 'notificationId',
        'alert_threshold_percent': 'alertThresholdPercent',
        'alert_threshold_value': 'alertThresholdValue',
        'notification_type': 'notificationType',
        'trigger_action_successful': 'triggerActionSuccessful'
    }

    def __init__(self, id=None, created_at=None, workspace_id=None, budget_id=None, budget_name=None, notification_id=None, alert_threshold_percent=None, alert_threshold_value=None, notification_type=None, trigger_action_successful=None):  # noqa: E501
        """BudgetAlertDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_at = None
        self._workspace_id = None
        self._budget_id = None
        self._budget_name = None
        self._notification_id = None
        self._alert_threshold_percent = None
        self._alert_threshold_value = None
        self._notification_type = None
        self._trigger_action_successful = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if workspace_id is not None:
            self.workspace_id = workspace_id
        if budget_id is not None:
            self.budget_id = budget_id
        if budget_name is not None:
            self.budget_name = budget_name
        if notification_id is not None:
            self.notification_id = notification_id
        if alert_threshold_percent is not None:
            self.alert_threshold_percent = alert_threshold_percent
        if alert_threshold_value is not None:
            self.alert_threshold_value = alert_threshold_value
        if notification_type is not None:
            self.notification_type = notification_type
        if trigger_action_successful is not None:
            self.trigger_action_successful = trigger_action_successful

    @property
    def id(self):
        """Gets the id of this BudgetAlertDto.  # noqa: E501


        :return: The id of this BudgetAlertDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BudgetAlertDto.


        :param id: The id of this BudgetAlertDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this BudgetAlertDto.  # noqa: E501


        :return: The created_at of this BudgetAlertDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BudgetAlertDto.


        :param created_at: The created_at of this BudgetAlertDto.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def workspace_id(self):
        """Gets the workspace_id of this BudgetAlertDto.  # noqa: E501


        :return: The workspace_id of this BudgetAlertDto.  # noqa: E501
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this BudgetAlertDto.


        :param workspace_id: The workspace_id of this BudgetAlertDto.  # noqa: E501
        :type: str
        """

        self._workspace_id = workspace_id

    @property
    def budget_id(self):
        """Gets the budget_id of this BudgetAlertDto.  # noqa: E501


        :return: The budget_id of this BudgetAlertDto.  # noqa: E501
        :rtype: str
        """
        return self._budget_id

    @budget_id.setter
    def budget_id(self, budget_id):
        """Sets the budget_id of this BudgetAlertDto.


        :param budget_id: The budget_id of this BudgetAlertDto.  # noqa: E501
        :type: str
        """

        self._budget_id = budget_id

    @property
    def budget_name(self):
        """Gets the budget_name of this BudgetAlertDto.  # noqa: E501


        :return: The budget_name of this BudgetAlertDto.  # noqa: E501
        :rtype: str
        """
        return self._budget_name

    @budget_name.setter
    def budget_name(self, budget_name):
        """Sets the budget_name of this BudgetAlertDto.


        :param budget_name: The budget_name of this BudgetAlertDto.  # noqa: E501
        :type: str
        """

        self._budget_name = budget_name

    @property
    def notification_id(self):
        """Gets the notification_id of this BudgetAlertDto.  # noqa: E501


        :return: The notification_id of this BudgetAlertDto.  # noqa: E501
        :rtype: str
        """
        return self._notification_id

    @notification_id.setter
    def notification_id(self, notification_id):
        """Sets the notification_id of this BudgetAlertDto.


        :param notification_id: The notification_id of this BudgetAlertDto.  # noqa: E501
        :type: str
        """

        self._notification_id = notification_id

    @property
    def alert_threshold_percent(self):
        """Gets the alert_threshold_percent of this BudgetAlertDto.  # noqa: E501


        :return: The alert_threshold_percent of this BudgetAlertDto.  # noqa: E501
        :rtype: int
        """
        return self._alert_threshold_percent

    @alert_threshold_percent.setter
    def alert_threshold_percent(self, alert_threshold_percent):
        """Sets the alert_threshold_percent of this BudgetAlertDto.


        :param alert_threshold_percent: The alert_threshold_percent of this BudgetAlertDto.  # noqa: E501
        :type: int
        """

        self._alert_threshold_percent = alert_threshold_percent

    @property
    def alert_threshold_value(self):
        """Gets the alert_threshold_value of this BudgetAlertDto.  # noqa: E501


        :return: The alert_threshold_value of this BudgetAlertDto.  # noqa: E501
        :rtype: float
        """
        return self._alert_threshold_value

    @alert_threshold_value.setter
    def alert_threshold_value(self, alert_threshold_value):
        """Sets the alert_threshold_value of this BudgetAlertDto.


        :param alert_threshold_value: The alert_threshold_value of this BudgetAlertDto.  # noqa: E501
        :type: float
        """

        self._alert_threshold_value = alert_threshold_value

    @property
    def notification_type(self):
        """Gets the notification_type of this BudgetAlertDto.  # noqa: E501


        :return: The notification_type of this BudgetAlertDto.  # noqa: E501
        :rtype: str
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this BudgetAlertDto.


        :param notification_type: The notification_type of this BudgetAlertDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["EMAIL", "WEBHOOK", "HARD_LIMIT"]  # noqa: E501
        if notification_type not in allowed_values:
            raise ValueError(
                "Invalid value for `notification_type` ({0}), must be one of {1}"  # noqa: E501
                .format(notification_type, allowed_values)
            )

        self._notification_type = notification_type

    @property
    def trigger_action_successful(self):
        """Gets the trigger_action_successful of this BudgetAlertDto.  # noqa: E501


        :return: The trigger_action_successful of this BudgetAlertDto.  # noqa: E501
        :rtype: bool
        """
        return self._trigger_action_successful

    @trigger_action_successful.setter
    def trigger_action_successful(self, trigger_action_successful):
        """Sets the trigger_action_successful of this BudgetAlertDto.


        :param trigger_action_successful: The trigger_action_successful of this BudgetAlertDto.  # noqa: E501
        :type: bool
        """

        self._trigger_action_successful = trigger_action_successful

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BudgetAlertDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BudgetAlertDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

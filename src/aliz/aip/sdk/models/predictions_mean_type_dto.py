# coding: utf-8

"""
    Aliz AIP REST API

    AIP Workspace API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: aip-support@aliz.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PredictionsMeanTypeDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'q25': 'list[MetricValueDto]',
        'median': 'list[MetricValueDto]',
        'q75': 'list[MetricValueDto]',
        'avg': 'list[MetricValueDto]'
    }

    attribute_map = {
        'q25': 'q25',
        'median': 'median',
        'q75': 'q75',
        'avg': 'avg'
    }

    def __init__(self, q25=None, median=None, q75=None, avg=None):  # noqa: E501
        """PredictionsMeanTypeDto - a model defined in Swagger"""  # noqa: E501
        self._q25 = None
        self._median = None
        self._q75 = None
        self._avg = None
        self.discriminator = None
        if q25 is not None:
            self.q25 = q25
        if median is not None:
            self.median = median
        if q75 is not None:
            self.q75 = q75
        if avg is not None:
            self.avg = avg

    @property
    def q25(self):
        """Gets the q25 of this PredictionsMeanTypeDto.  # noqa: E501


        :return: The q25 of this PredictionsMeanTypeDto.  # noqa: E501
        :rtype: list[MetricValueDto]
        """
        return self._q25

    @q25.setter
    def q25(self, q25):
        """Sets the q25 of this PredictionsMeanTypeDto.


        :param q25: The q25 of this PredictionsMeanTypeDto.  # noqa: E501
        :type: list[MetricValueDto]
        """

        self._q25 = q25

    @property
    def median(self):
        """Gets the median of this PredictionsMeanTypeDto.  # noqa: E501


        :return: The median of this PredictionsMeanTypeDto.  # noqa: E501
        :rtype: list[MetricValueDto]
        """
        return self._median

    @median.setter
    def median(self, median):
        """Sets the median of this PredictionsMeanTypeDto.


        :param median: The median of this PredictionsMeanTypeDto.  # noqa: E501
        :type: list[MetricValueDto]
        """

        self._median = median

    @property
    def q75(self):
        """Gets the q75 of this PredictionsMeanTypeDto.  # noqa: E501


        :return: The q75 of this PredictionsMeanTypeDto.  # noqa: E501
        :rtype: list[MetricValueDto]
        """
        return self._q75

    @q75.setter
    def q75(self, q75):
        """Sets the q75 of this PredictionsMeanTypeDto.


        :param q75: The q75 of this PredictionsMeanTypeDto.  # noqa: E501
        :type: list[MetricValueDto]
        """

        self._q75 = q75

    @property
    def avg(self):
        """Gets the avg of this PredictionsMeanTypeDto.  # noqa: E501


        :return: The avg of this PredictionsMeanTypeDto.  # noqa: E501
        :rtype: list[MetricValueDto]
        """
        return self._avg

    @avg.setter
    def avg(self, avg):
        """Sets the avg of this PredictionsMeanTypeDto.


        :param avg: The avg of this PredictionsMeanTypeDto.  # noqa: E501
        :type: list[MetricValueDto]
        """

        self._avg = avg

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PredictionsMeanTypeDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PredictionsMeanTypeDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

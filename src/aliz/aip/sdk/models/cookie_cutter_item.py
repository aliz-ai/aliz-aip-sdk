# coding: utf-8

"""
    Aliz AIP REST API

    AIP Workspace API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: aip-support@aliz.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CookieCutterItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'value': 'object',
        'description': 'str',
        'name': 'str',
        'constraint': 'CookieCutterItemConstraint',
        'type': 'str'
    }

    attribute_map = {
        'key': 'key',
        'value': 'value',
        'description': 'description',
        'name': 'name',
        'constraint': 'constraint',
        'type': 'type'
    }

    discriminator_value_class_map = {
            'STRING'.lower(): 'CookieCutterTextItem',
            'ARRAY'.lower(): 'CookieCutterArrayItem',
            'OBJECT'.lower(): 'CookieCutterObjectItem',
            'CHOICE'.lower(): 'CookieCutterChoiceItem',
    }

    def __init__(self, key=None, value=None, description=None, name=None, constraint=None, type=None):  # noqa: E501
        """CookieCutterItem - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._value = None
        self._description = None
        self._name = None
        self._constraint = None
        self._type = None
        self.discriminator = 'type'
        if key is not None:
            self.key = key
        if value is not None:
            self.value = value
        if description is not None:
            self.description = description
        if name is not None:
            self.name = name
        if constraint is not None:
            self.constraint = constraint
        if type is not None:
            self.type = type

    @property
    def key(self):
        """Gets the key of this CookieCutterItem.  # noqa: E501


        :return: The key of this CookieCutterItem.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this CookieCutterItem.


        :param key: The key of this CookieCutterItem.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def value(self):
        """Gets the value of this CookieCutterItem.  # noqa: E501


        :return: The value of this CookieCutterItem.  # noqa: E501
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CookieCutterItem.


        :param value: The value of this CookieCutterItem.  # noqa: E501
        :type: object
        """

        self._value = value

    @property
    def description(self):
        """Gets the description of this CookieCutterItem.  # noqa: E501


        :return: The description of this CookieCutterItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CookieCutterItem.


        :param description: The description of this CookieCutterItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this CookieCutterItem.  # noqa: E501


        :return: The name of this CookieCutterItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CookieCutterItem.


        :param name: The name of this CookieCutterItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def constraint(self):
        """Gets the constraint of this CookieCutterItem.  # noqa: E501


        :return: The constraint of this CookieCutterItem.  # noqa: E501
        :rtype: CookieCutterItemConstraint
        """
        return self._constraint

    @constraint.setter
    def constraint(self, constraint):
        """Sets the constraint of this CookieCutterItem.


        :param constraint: The constraint of this CookieCutterItem.  # noqa: E501
        :type: CookieCutterItemConstraint
        """

        self._constraint = constraint

    @property
    def type(self):
        """Gets the type of this CookieCutterItem.  # noqa: E501


        :return: The type of this CookieCutterItem.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CookieCutterItem.


        :param type: The type of this CookieCutterItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["ARRAY", "CHOICE", "OBJECT", "STRING"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CookieCutterItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CookieCutterItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

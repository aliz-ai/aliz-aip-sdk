# coding: utf-8

"""
    Aliz AIP REST API

    AIP Workspace API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: aip-support@aliz.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProjectDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_id': 'str',
        'project_number': 'str',
        'name': 'str',
        'create_time': 'str',
        'environment_type': 'str',
        'provisioning_enabled': 'bool',
        'approval_workflow_enabled': 'bool',
        'approvers': 'list[str]',
        'provisioning_branch': 'str',
        'cloud_build_service_account_email': 'str'
    }

    attribute_map = {
        'project_id': 'projectId',
        'project_number': 'projectNumber',
        'name': 'name',
        'create_time': 'createTime',
        'environment_type': 'environmentType',
        'provisioning_enabled': 'provisioningEnabled',
        'approval_workflow_enabled': 'approvalWorkflowEnabled',
        'approvers': 'approvers',
        'provisioning_branch': 'provisioningBranch',
        'cloud_build_service_account_email': 'cloudBuildServiceAccountEmail'
    }

    def __init__(self, project_id=None, project_number=None, name=None, create_time=None, environment_type=None, provisioning_enabled=None, approval_workflow_enabled=None, approvers=None, provisioning_branch=None, cloud_build_service_account_email=None):  # noqa: E501
        """ProjectDto - a model defined in Swagger"""  # noqa: E501
        self._project_id = None
        self._project_number = None
        self._name = None
        self._create_time = None
        self._environment_type = None
        self._provisioning_enabled = None
        self._approval_workflow_enabled = None
        self._approvers = None
        self._provisioning_branch = None
        self._cloud_build_service_account_email = None
        self.discriminator = None
        if project_id is not None:
            self.project_id = project_id
        if project_number is not None:
            self.project_number = project_number
        if name is not None:
            self.name = name
        if create_time is not None:
            self.create_time = create_time
        if environment_type is not None:
            self.environment_type = environment_type
        if provisioning_enabled is not None:
            self.provisioning_enabled = provisioning_enabled
        if approval_workflow_enabled is not None:
            self.approval_workflow_enabled = approval_workflow_enabled
        if approvers is not None:
            self.approvers = approvers
        if provisioning_branch is not None:
            self.provisioning_branch = provisioning_branch
        if cloud_build_service_account_email is not None:
            self.cloud_build_service_account_email = cloud_build_service_account_email

    @property
    def project_id(self):
        """Gets the project_id of this ProjectDto.  # noqa: E501


        :return: The project_id of this ProjectDto.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ProjectDto.


        :param project_id: The project_id of this ProjectDto.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def project_number(self):
        """Gets the project_number of this ProjectDto.  # noqa: E501


        :return: The project_number of this ProjectDto.  # noqa: E501
        :rtype: str
        """
        return self._project_number

    @project_number.setter
    def project_number(self, project_number):
        """Sets the project_number of this ProjectDto.


        :param project_number: The project_number of this ProjectDto.  # noqa: E501
        :type: str
        """

        self._project_number = project_number

    @property
    def name(self):
        """Gets the name of this ProjectDto.  # noqa: E501


        :return: The name of this ProjectDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectDto.


        :param name: The name of this ProjectDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def create_time(self):
        """Gets the create_time of this ProjectDto.  # noqa: E501


        :return: The create_time of this ProjectDto.  # noqa: E501
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ProjectDto.


        :param create_time: The create_time of this ProjectDto.  # noqa: E501
        :type: str
        """

        self._create_time = create_time

    @property
    def environment_type(self):
        """Gets the environment_type of this ProjectDto.  # noqa: E501


        :return: The environment_type of this ProjectDto.  # noqa: E501
        :rtype: str
        """
        return self._environment_type

    @environment_type.setter
    def environment_type(self, environment_type):
        """Sets the environment_type of this ProjectDto.


        :param environment_type: The environment_type of this ProjectDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "TEST", "DEVELOP", "PRODUCTION", "STAGING", "UAT"]  # noqa: E501
        if environment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `environment_type` ({0}), must be one of {1}"  # noqa: E501
                .format(environment_type, allowed_values)
            )

        self._environment_type = environment_type

    @property
    def provisioning_enabled(self):
        """Gets the provisioning_enabled of this ProjectDto.  # noqa: E501


        :return: The provisioning_enabled of this ProjectDto.  # noqa: E501
        :rtype: bool
        """
        return self._provisioning_enabled

    @provisioning_enabled.setter
    def provisioning_enabled(self, provisioning_enabled):
        """Sets the provisioning_enabled of this ProjectDto.


        :param provisioning_enabled: The provisioning_enabled of this ProjectDto.  # noqa: E501
        :type: bool
        """

        self._provisioning_enabled = provisioning_enabled

    @property
    def approval_workflow_enabled(self):
        """Gets the approval_workflow_enabled of this ProjectDto.  # noqa: E501


        :return: The approval_workflow_enabled of this ProjectDto.  # noqa: E501
        :rtype: bool
        """
        return self._approval_workflow_enabled

    @approval_workflow_enabled.setter
    def approval_workflow_enabled(self, approval_workflow_enabled):
        """Sets the approval_workflow_enabled of this ProjectDto.


        :param approval_workflow_enabled: The approval_workflow_enabled of this ProjectDto.  # noqa: E501
        :type: bool
        """

        self._approval_workflow_enabled = approval_workflow_enabled

    @property
    def approvers(self):
        """Gets the approvers of this ProjectDto.  # noqa: E501


        :return: The approvers of this ProjectDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._approvers

    @approvers.setter
    def approvers(self, approvers):
        """Sets the approvers of this ProjectDto.


        :param approvers: The approvers of this ProjectDto.  # noqa: E501
        :type: list[str]
        """

        self._approvers = approvers

    @property
    def provisioning_branch(self):
        """Gets the provisioning_branch of this ProjectDto.  # noqa: E501


        :return: The provisioning_branch of this ProjectDto.  # noqa: E501
        :rtype: str
        """
        return self._provisioning_branch

    @provisioning_branch.setter
    def provisioning_branch(self, provisioning_branch):
        """Sets the provisioning_branch of this ProjectDto.


        :param provisioning_branch: The provisioning_branch of this ProjectDto.  # noqa: E501
        :type: str
        """

        self._provisioning_branch = provisioning_branch

    @property
    def cloud_build_service_account_email(self):
        """Gets the cloud_build_service_account_email of this ProjectDto.  # noqa: E501


        :return: The cloud_build_service_account_email of this ProjectDto.  # noqa: E501
        :rtype: str
        """
        return self._cloud_build_service_account_email

    @cloud_build_service_account_email.setter
    def cloud_build_service_account_email(self, cloud_build_service_account_email):
        """Sets the cloud_build_service_account_email of this ProjectDto.


        :param cloud_build_service_account_email: The cloud_build_service_account_email of this ProjectDto.  # noqa: E501
        :type: str
        """

        self._cloud_build_service_account_email = cloud_build_service_account_email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

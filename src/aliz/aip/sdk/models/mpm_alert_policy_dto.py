# coding: utf-8

"""
    Aliz AIP REST API

    AIP Workspace API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: aip-support@aliz.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MpmAlertPolicyDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mpm_alert_policy_id': 'str',
        'policy_name': 'str',
        'metric_type': 'str',
        'threshold': 'float',
        'comparison': 'str',
        'duration': 'int'
    }

    attribute_map = {
        'mpm_alert_policy_id': 'mpmAlertPolicyId',
        'policy_name': 'policyName',
        'metric_type': 'metricType',
        'threshold': 'threshold',
        'comparison': 'comparison',
        'duration': 'duration'
    }

    def __init__(self, mpm_alert_policy_id=None, policy_name=None, metric_type=None, threshold=None, comparison=None, duration=None):  # noqa: E501
        """MpmAlertPolicyDto - a model defined in Swagger"""  # noqa: E501
        self._mpm_alert_policy_id = None
        self._policy_name = None
        self._metric_type = None
        self._threshold = None
        self._comparison = None
        self._duration = None
        self.discriminator = None
        if mpm_alert_policy_id is not None:
            self.mpm_alert_policy_id = mpm_alert_policy_id
        self.policy_name = policy_name
        self.metric_type = metric_type
        self.threshold = threshold
        self.comparison = comparison
        self.duration = duration

    @property
    def mpm_alert_policy_id(self):
        """Gets the mpm_alert_policy_id of this MpmAlertPolicyDto.  # noqa: E501


        :return: The mpm_alert_policy_id of this MpmAlertPolicyDto.  # noqa: E501
        :rtype: str
        """
        return self._mpm_alert_policy_id

    @mpm_alert_policy_id.setter
    def mpm_alert_policy_id(self, mpm_alert_policy_id):
        """Sets the mpm_alert_policy_id of this MpmAlertPolicyDto.


        :param mpm_alert_policy_id: The mpm_alert_policy_id of this MpmAlertPolicyDto.  # noqa: E501
        :type: str
        """

        self._mpm_alert_policy_id = mpm_alert_policy_id

    @property
    def policy_name(self):
        """Gets the policy_name of this MpmAlertPolicyDto.  # noqa: E501


        :return: The policy_name of this MpmAlertPolicyDto.  # noqa: E501
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this MpmAlertPolicyDto.


        :param policy_name: The policy_name of this MpmAlertPolicyDto.  # noqa: E501
        :type: str
        """
        if policy_name is None:
            raise ValueError("Invalid value for `policy_name`, must not be `None`")  # noqa: E501

        self._policy_name = policy_name

    @property
    def metric_type(self):
        """Gets the metric_type of this MpmAlertPolicyDto.  # noqa: E501


        :return: The metric_type of this MpmAlertPolicyDto.  # noqa: E501
        :rtype: str
        """
        return self._metric_type

    @metric_type.setter
    def metric_type(self, metric_type):
        """Sets the metric_type of this MpmAlertPolicyDto.


        :param metric_type: The metric_type of this MpmAlertPolicyDto.  # noqa: E501
        :type: str
        """
        if metric_type is None:
            raise ValueError("Invalid value for `metric_type`, must not be `None`")  # noqa: E501
        allowed_values = ["FEATURE_DRIFT"]  # noqa: E501
        if metric_type not in allowed_values:
            raise ValueError(
                "Invalid value for `metric_type` ({0}), must be one of {1}"  # noqa: E501
                .format(metric_type, allowed_values)
            )

        self._metric_type = metric_type

    @property
    def threshold(self):
        """Gets the threshold of this MpmAlertPolicyDto.  # noqa: E501


        :return: The threshold of this MpmAlertPolicyDto.  # noqa: E501
        :rtype: float
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this MpmAlertPolicyDto.


        :param threshold: The threshold of this MpmAlertPolicyDto.  # noqa: E501
        :type: float
        """
        if threshold is None:
            raise ValueError("Invalid value for `threshold`, must not be `None`")  # noqa: E501

        self._threshold = threshold

    @property
    def comparison(self):
        """Gets the comparison of this MpmAlertPolicyDto.  # noqa: E501


        :return: The comparison of this MpmAlertPolicyDto.  # noqa: E501
        :rtype: str
        """
        return self._comparison

    @comparison.setter
    def comparison(self, comparison):
        """Sets the comparison of this MpmAlertPolicyDto.


        :param comparison: The comparison of this MpmAlertPolicyDto.  # noqa: E501
        :type: str
        """
        if comparison is None:
            raise ValueError("Invalid value for `comparison`, must not be `None`")  # noqa: E501
        allowed_values = ["COMPARISON_GT", "COMPARISON_GE", "COMPARISON_LT", "COMPARISON_LE", "COMPARISON_EQ", "COMPARISON_NE"]  # noqa: E501
        if comparison not in allowed_values:
            raise ValueError(
                "Invalid value for `comparison` ({0}), must be one of {1}"  # noqa: E501
                .format(comparison, allowed_values)
            )

        self._comparison = comparison

    @property
    def duration(self):
        """Gets the duration of this MpmAlertPolicyDto.  # noqa: E501


        :return: The duration of this MpmAlertPolicyDto.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this MpmAlertPolicyDto.


        :param duration: The duration of this MpmAlertPolicyDto.  # noqa: E501
        :type: int
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501

        self._duration = duration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MpmAlertPolicyDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MpmAlertPolicyDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

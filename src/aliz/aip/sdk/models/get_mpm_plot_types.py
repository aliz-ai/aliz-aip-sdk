# coding: utf-8

"""
    Aliz AIP REST API

    AIP Workspace API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: aip-support@aliz.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetMpmPlotTypes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'plot_types': 'list[str]'
    }

    attribute_map = {
        'plot_types': 'plotTypes'
    }

    def __init__(self, plot_types=None):  # noqa: E501
        """GetMpmPlotTypes - a model defined in Swagger"""  # noqa: E501
        self._plot_types = None
        self.discriminator = None
        if plot_types is not None:
            self.plot_types = plot_types

    @property
    def plot_types(self):
        """Gets the plot_types of this GetMpmPlotTypes.  # noqa: E501


        :return: The plot_types of this GetMpmPlotTypes.  # noqa: E501
        :rtype: list[str]
        """
        return self._plot_types

    @plot_types.setter
    def plot_types(self, plot_types):
        """Sets the plot_types of this GetMpmPlotTypes.


        :param plot_types: The plot_types of this GetMpmPlotTypes.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["ROC_CURVE", "PRECISION_RECALL_CURVE", "KOLMOGOROV_SMIRNOV_PLOT", "LIFT_PLOT", "LIFT_TABLE"]  # noqa: E501
        if not set(plot_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `plot_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(plot_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._plot_types = plot_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetMpmPlotTypes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetMpmPlotTypes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

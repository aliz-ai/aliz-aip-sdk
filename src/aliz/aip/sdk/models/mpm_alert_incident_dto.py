# coding: utf-8

"""
    Aliz AIP REST API

    AIP Workspace API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: aip-support@aliz.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MpmAlertIncidentDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mpm_alert_incident_id': 'str',
        'mpm_alert_policy': 'MpmAlertPolicyDto',
        'created_at': 'datetime',
        'resolved_at': 'datetime',
        'actual_value': 'str',
        'status': 'str',
        'severity': 'str'
    }

    attribute_map = {
        'mpm_alert_incident_id': 'mpmAlertIncidentId',
        'mpm_alert_policy': 'mpmAlertPolicy',
        'created_at': 'createdAt',
        'resolved_at': 'resolvedAt',
        'actual_value': 'actualValue',
        'status': 'status',
        'severity': 'severity'
    }

    def __init__(self, mpm_alert_incident_id=None, mpm_alert_policy=None, created_at=None, resolved_at=None, actual_value=None, status=None, severity=None):  # noqa: E501
        """MpmAlertIncidentDto - a model defined in Swagger"""  # noqa: E501
        self._mpm_alert_incident_id = None
        self._mpm_alert_policy = None
        self._created_at = None
        self._resolved_at = None
        self._actual_value = None
        self._status = None
        self._severity = None
        self.discriminator = None
        if mpm_alert_incident_id is not None:
            self.mpm_alert_incident_id = mpm_alert_incident_id
        if mpm_alert_policy is not None:
            self.mpm_alert_policy = mpm_alert_policy
        if created_at is not None:
            self.created_at = created_at
        if resolved_at is not None:
            self.resolved_at = resolved_at
        if actual_value is not None:
            self.actual_value = actual_value
        if status is not None:
            self.status = status
        if severity is not None:
            self.severity = severity

    @property
    def mpm_alert_incident_id(self):
        """Gets the mpm_alert_incident_id of this MpmAlertIncidentDto.  # noqa: E501


        :return: The mpm_alert_incident_id of this MpmAlertIncidentDto.  # noqa: E501
        :rtype: str
        """
        return self._mpm_alert_incident_id

    @mpm_alert_incident_id.setter
    def mpm_alert_incident_id(self, mpm_alert_incident_id):
        """Sets the mpm_alert_incident_id of this MpmAlertIncidentDto.


        :param mpm_alert_incident_id: The mpm_alert_incident_id of this MpmAlertIncidentDto.  # noqa: E501
        :type: str
        """

        self._mpm_alert_incident_id = mpm_alert_incident_id

    @property
    def mpm_alert_policy(self):
        """Gets the mpm_alert_policy of this MpmAlertIncidentDto.  # noqa: E501


        :return: The mpm_alert_policy of this MpmAlertIncidentDto.  # noqa: E501
        :rtype: MpmAlertPolicyDto
        """
        return self._mpm_alert_policy

    @mpm_alert_policy.setter
    def mpm_alert_policy(self, mpm_alert_policy):
        """Sets the mpm_alert_policy of this MpmAlertIncidentDto.


        :param mpm_alert_policy: The mpm_alert_policy of this MpmAlertIncidentDto.  # noqa: E501
        :type: MpmAlertPolicyDto
        """

        self._mpm_alert_policy = mpm_alert_policy

    @property
    def created_at(self):
        """Gets the created_at of this MpmAlertIncidentDto.  # noqa: E501


        :return: The created_at of this MpmAlertIncidentDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MpmAlertIncidentDto.


        :param created_at: The created_at of this MpmAlertIncidentDto.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def resolved_at(self):
        """Gets the resolved_at of this MpmAlertIncidentDto.  # noqa: E501


        :return: The resolved_at of this MpmAlertIncidentDto.  # noqa: E501
        :rtype: datetime
        """
        return self._resolved_at

    @resolved_at.setter
    def resolved_at(self, resolved_at):
        """Sets the resolved_at of this MpmAlertIncidentDto.


        :param resolved_at: The resolved_at of this MpmAlertIncidentDto.  # noqa: E501
        :type: datetime
        """

        self._resolved_at = resolved_at

    @property
    def actual_value(self):
        """Gets the actual_value of this MpmAlertIncidentDto.  # noqa: E501


        :return: The actual_value of this MpmAlertIncidentDto.  # noqa: E501
        :rtype: str
        """
        return self._actual_value

    @actual_value.setter
    def actual_value(self, actual_value):
        """Sets the actual_value of this MpmAlertIncidentDto.


        :param actual_value: The actual_value of this MpmAlertIncidentDto.  # noqa: E501
        :type: str
        """

        self._actual_value = actual_value

    @property
    def status(self):
        """Gets the status of this MpmAlertIncidentDto.  # noqa: E501


        :return: The status of this MpmAlertIncidentDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MpmAlertIncidentDto.


        :param status: The status of this MpmAlertIncidentDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "RESOLVED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def severity(self):
        """Gets the severity of this MpmAlertIncidentDto.  # noqa: E501


        :return: The severity of this MpmAlertIncidentDto.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this MpmAlertIncidentDto.


        :param severity: The severity of this MpmAlertIncidentDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["LOW", "MEDIUM", "HIGH"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values)
            )

        self._severity = severity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MpmAlertIncidentDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MpmAlertIncidentDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

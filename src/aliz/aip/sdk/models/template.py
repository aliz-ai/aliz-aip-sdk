# coding: utf-8

"""
    Aliz AIP REST API

    AIP Workspace API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: aip-support@aliz.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Template(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'repository_name': 'str',
        'file_path': 'str',
        'description': 'str',
        'versions': 'list[TemplateVersion]',
        'image': 'str',
        'instance_count': 'int',
        'created_by_id': 'str',
        'created_at': 'datetime',
        'last_modified_by_id': 'str',
        'last_modified_at': 'datetime',
        'provided_by_aliz': 'bool',
        'terraform_script_directory': 'str',
        'terraform_env_directory': 'str',
        'template_categories': 'list[TemplateCategory]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'repository_name': 'repositoryName',
        'file_path': 'filePath',
        'description': 'description',
        'versions': 'versions',
        'image': 'image',
        'instance_count': 'instanceCount',
        'created_by_id': 'createdById',
        'created_at': 'createdAt',
        'last_modified_by_id': 'lastModifiedById',
        'last_modified_at': 'lastModifiedAt',
        'provided_by_aliz': 'providedByAliz',
        'terraform_script_directory': 'terraformScriptDirectory',
        'terraform_env_directory': 'terraformEnvDirectory',
        'template_categories': 'templateCategories'
    }

    def __init__(self, id=None, name=None, repository_name=None, file_path=None, description=None, versions=None, image=None, instance_count=None, created_by_id=None, created_at=None, last_modified_by_id=None, last_modified_at=None, provided_by_aliz=None, terraform_script_directory=None, terraform_env_directory=None, template_categories=None):  # noqa: E501
        """Template - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._repository_name = None
        self._file_path = None
        self._description = None
        self._versions = None
        self._image = None
        self._instance_count = None
        self._created_by_id = None
        self._created_at = None
        self._last_modified_by_id = None
        self._last_modified_at = None
        self._provided_by_aliz = None
        self._terraform_script_directory = None
        self._terraform_env_directory = None
        self._template_categories = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        self.repository_name = repository_name
        self.file_path = file_path
        if description is not None:
            self.description = description
        if versions is not None:
            self.versions = versions
        if image is not None:
            self.image = image
        if instance_count is not None:
            self.instance_count = instance_count
        if created_by_id is not None:
            self.created_by_id = created_by_id
        if created_at is not None:
            self.created_at = created_at
        if last_modified_by_id is not None:
            self.last_modified_by_id = last_modified_by_id
        if last_modified_at is not None:
            self.last_modified_at = last_modified_at
        if provided_by_aliz is not None:
            self.provided_by_aliz = provided_by_aliz
        if terraform_script_directory is not None:
            self.terraform_script_directory = terraform_script_directory
        if terraform_env_directory is not None:
            self.terraform_env_directory = terraform_env_directory
        if template_categories is not None:
            self.template_categories = template_categories

    @property
    def id(self):
        """Gets the id of this Template.  # noqa: E501

        Template ID. Cannot be set when creating templates  # noqa: E501

        :return: The id of this Template.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Template.

        Template ID. Cannot be set when creating templates  # noqa: E501

        :param id: The id of this Template.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Template.  # noqa: E501

        Template name.  # noqa: E501

        :return: The name of this Template.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Template.

        Template name.  # noqa: E501

        :param name: The name of this Template.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def repository_name(self):
        """Gets the repository_name of this Template.  # noqa: E501

        Template repository name.  # noqa: E501

        :return: The repository_name of this Template.  # noqa: E501
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this Template.

        Template repository name.  # noqa: E501

        :param repository_name: The repository_name of this Template.  # noqa: E501
        :type: str
        """
        if repository_name is None:
            raise ValueError("Invalid value for `repository_name`, must not be `None`")  # noqa: E501

        self._repository_name = repository_name

    @property
    def file_path(self):
        """Gets the file_path of this Template.  # noqa: E501

        Template repository file path.  # noqa: E501

        :return: The file_path of this Template.  # noqa: E501
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this Template.

        Template repository file path.  # noqa: E501

        :param file_path: The file_path of this Template.  # noqa: E501
        :type: str
        """
        if file_path is None:
            raise ValueError("Invalid value for `file_path`, must not be `None`")  # noqa: E501

        self._file_path = file_path

    @property
    def description(self):
        """Gets the description of this Template.  # noqa: E501

        Description for the template.  # noqa: E501

        :return: The description of this Template.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Template.

        Description for the template.  # noqa: E501

        :param description: The description of this Template.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def versions(self):
        """Gets the versions of this Template.  # noqa: E501

        Versions.  # noqa: E501

        :return: The versions of this Template.  # noqa: E501
        :rtype: list[TemplateVersion]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this Template.

        Versions.  # noqa: E501

        :param versions: The versions of this Template.  # noqa: E501
        :type: list[TemplateVersion]
        """

        self._versions = versions

    @property
    def image(self):
        """Gets the image of this Template.  # noqa: E501

        Image name.  # noqa: E501

        :return: The image of this Template.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Template.

        Image name.  # noqa: E501

        :param image: The image of this Template.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def instance_count(self):
        """Gets the instance_count of this Template.  # noqa: E501

        Number of deployed instances.  # noqa: E501

        :return: The instance_count of this Template.  # noqa: E501
        :rtype: int
        """
        return self._instance_count

    @instance_count.setter
    def instance_count(self, instance_count):
        """Sets the instance_count of this Template.

        Number of deployed instances.  # noqa: E501

        :param instance_count: The instance_count of this Template.  # noqa: E501
        :type: int
        """

        self._instance_count = instance_count

    @property
    def created_by_id(self):
        """Gets the created_by_id of this Template.  # noqa: E501

        User ID of the one who created the template. Should not be set when creating the template.  # noqa: E501

        :return: The created_by_id of this Template.  # noqa: E501
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this Template.

        User ID of the one who created the template. Should not be set when creating the template.  # noqa: E501

        :param created_by_id: The created_by_id of this Template.  # noqa: E501
        :type: str
        """

        self._created_by_id = created_by_id

    @property
    def created_at(self):
        """Gets the created_at of this Template.  # noqa: E501

        Date-time of the template creation. Should not be set when creating the template.  # noqa: E501

        :return: The created_at of this Template.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Template.

        Date-time of the template creation. Should not be set when creating the template.  # noqa: E501

        :param created_at: The created_at of this Template.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def last_modified_by_id(self):
        """Gets the last_modified_by_id of this Template.  # noqa: E501

        User ID of the one who edited the template for the last time. Should not be set when creating/editing the template.  # noqa: E501

        :return: The last_modified_by_id of this Template.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by_id

    @last_modified_by_id.setter
    def last_modified_by_id(self, last_modified_by_id):
        """Sets the last_modified_by_id of this Template.

        User ID of the one who edited the template for the last time. Should not be set when creating/editing the template.  # noqa: E501

        :param last_modified_by_id: The last_modified_by_id of this Template.  # noqa: E501
        :type: str
        """

        self._last_modified_by_id = last_modified_by_id

    @property
    def last_modified_at(self):
        """Gets the last_modified_at of this Template.  # noqa: E501

        Date-time of the last template editing. Should not be set when creating/editing the template.  # noqa: E501

        :return: The last_modified_at of this Template.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_at

    @last_modified_at.setter
    def last_modified_at(self, last_modified_at):
        """Sets the last_modified_at of this Template.

        Date-time of the last template editing. Should not be set when creating/editing the template.  # noqa: E501

        :param last_modified_at: The last_modified_at of this Template.  # noqa: E501
        :type: datetime
        """

        self._last_modified_at = last_modified_at

    @property
    def provided_by_aliz(self):
        """Gets the provided_by_aliz of this Template.  # noqa: E501

        Is it provided by Aliz or not.  # noqa: E501

        :return: The provided_by_aliz of this Template.  # noqa: E501
        :rtype: bool
        """
        return self._provided_by_aliz

    @provided_by_aliz.setter
    def provided_by_aliz(self, provided_by_aliz):
        """Sets the provided_by_aliz of this Template.

        Is it provided by Aliz or not.  # noqa: E501

        :param provided_by_aliz: The provided_by_aliz of this Template.  # noqa: E501
        :type: bool
        """

        self._provided_by_aliz = provided_by_aliz

    @property
    def terraform_script_directory(self):
        """Gets the terraform_script_directory of this Template.  # noqa: E501


        :return: The terraform_script_directory of this Template.  # noqa: E501
        :rtype: str
        """
        return self._terraform_script_directory

    @terraform_script_directory.setter
    def terraform_script_directory(self, terraform_script_directory):
        """Sets the terraform_script_directory of this Template.


        :param terraform_script_directory: The terraform_script_directory of this Template.  # noqa: E501
        :type: str
        """

        self._terraform_script_directory = terraform_script_directory

    @property
    def terraform_env_directory(self):
        """Gets the terraform_env_directory of this Template.  # noqa: E501


        :return: The terraform_env_directory of this Template.  # noqa: E501
        :rtype: str
        """
        return self._terraform_env_directory

    @terraform_env_directory.setter
    def terraform_env_directory(self, terraform_env_directory):
        """Sets the terraform_env_directory of this Template.


        :param terraform_env_directory: The terraform_env_directory of this Template.  # noqa: E501
        :type: str
        """

        self._terraform_env_directory = terraform_env_directory

    @property
    def template_categories(self):
        """Gets the template_categories of this Template.  # noqa: E501

        The list of categories the template is in.  # noqa: E501

        :return: The template_categories of this Template.  # noqa: E501
        :rtype: list[TemplateCategory]
        """
        return self._template_categories

    @template_categories.setter
    def template_categories(self, template_categories):
        """Sets the template_categories of this Template.

        The list of categories the template is in.  # noqa: E501

        :param template_categories: The template_categories of this Template.  # noqa: E501
        :type: list[TemplateCategory]
        """

        self._template_categories = template_categories

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Template, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Template):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Aliz AIP REST API

    AIP Workspace API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: aip-support@aliz.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProvisioningDetailDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'provisioning': 'ProvisionDto',
        'commit_id': 'str',
        'provision_type': 'str',
        'builds': 'list[BuildDto]',
        'outputs': 'dict(str, str)'
    }

    attribute_map = {
        'provisioning': 'provisioning',
        'commit_id': 'commitId',
        'provision_type': 'provisionType',
        'builds': 'builds',
        'outputs': 'outputs'
    }

    def __init__(self, provisioning=None, commit_id=None, provision_type=None, builds=None, outputs=None):  # noqa: E501
        """ProvisioningDetailDto - a model defined in Swagger"""  # noqa: E501
        self._provisioning = None
        self._commit_id = None
        self._provision_type = None
        self._builds = None
        self._outputs = None
        self.discriminator = None
        if provisioning is not None:
            self.provisioning = provisioning
        if commit_id is not None:
            self.commit_id = commit_id
        if provision_type is not None:
            self.provision_type = provision_type
        if builds is not None:
            self.builds = builds
        if outputs is not None:
            self.outputs = outputs

    @property
    def provisioning(self):
        """Gets the provisioning of this ProvisioningDetailDto.  # noqa: E501


        :return: The provisioning of this ProvisioningDetailDto.  # noqa: E501
        :rtype: ProvisionDto
        """
        return self._provisioning

    @provisioning.setter
    def provisioning(self, provisioning):
        """Sets the provisioning of this ProvisioningDetailDto.


        :param provisioning: The provisioning of this ProvisioningDetailDto.  # noqa: E501
        :type: ProvisionDto
        """

        self._provisioning = provisioning

    @property
    def commit_id(self):
        """Gets the commit_id of this ProvisioningDetailDto.  # noqa: E501


        :return: The commit_id of this ProvisioningDetailDto.  # noqa: E501
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """Sets the commit_id of this ProvisioningDetailDto.


        :param commit_id: The commit_id of this ProvisioningDetailDto.  # noqa: E501
        :type: str
        """

        self._commit_id = commit_id

    @property
    def provision_type(self):
        """Gets the provision_type of this ProvisioningDetailDto.  # noqa: E501


        :return: The provision_type of this ProvisioningDetailDto.  # noqa: E501
        :rtype: str
        """
        return self._provision_type

    @provision_type.setter
    def provision_type(self, provision_type):
        """Sets the provision_type of this ProvisioningDetailDto.


        :param provision_type: The provision_type of this ProvisioningDetailDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["AUTO", "MANUAL"]  # noqa: E501
        if provision_type not in allowed_values:
            raise ValueError(
                "Invalid value for `provision_type` ({0}), must be one of {1}"  # noqa: E501
                .format(provision_type, allowed_values)
            )

        self._provision_type = provision_type

    @property
    def builds(self):
        """Gets the builds of this ProvisioningDetailDto.  # noqa: E501


        :return: The builds of this ProvisioningDetailDto.  # noqa: E501
        :rtype: list[BuildDto]
        """
        return self._builds

    @builds.setter
    def builds(self, builds):
        """Sets the builds of this ProvisioningDetailDto.


        :param builds: The builds of this ProvisioningDetailDto.  # noqa: E501
        :type: list[BuildDto]
        """

        self._builds = builds

    @property
    def outputs(self):
        """Gets the outputs of this ProvisioningDetailDto.  # noqa: E501


        :return: The outputs of this ProvisioningDetailDto.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this ProvisioningDetailDto.


        :param outputs: The outputs of this ProvisioningDetailDto.  # noqa: E501
        :type: dict(str, str)
        """

        self._outputs = outputs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProvisioningDetailDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProvisioningDetailDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Aliz AIP REST API

    AIP Workspace API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: aip-support@aliz.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StepDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'build_step_id': 'str',
        'logs': 'list[str]',
        'status': 'str'
    }

    attribute_map = {
        'build_step_id': 'buildStepId',
        'logs': 'logs',
        'status': 'status'
    }

    def __init__(self, build_step_id=None, logs=None, status=None):  # noqa: E501
        """StepDto - a model defined in Swagger"""  # noqa: E501
        self._build_step_id = None
        self._logs = None
        self._status = None
        self.discriminator = None
        if build_step_id is not None:
            self.build_step_id = build_step_id
        if logs is not None:
            self.logs = logs
        if status is not None:
            self.status = status

    @property
    def build_step_id(self):
        """Gets the build_step_id of this StepDto.  # noqa: E501


        :return: The build_step_id of this StepDto.  # noqa: E501
        :rtype: str
        """
        return self._build_step_id

    @build_step_id.setter
    def build_step_id(self, build_step_id):
        """Sets the build_step_id of this StepDto.


        :param build_step_id: The build_step_id of this StepDto.  # noqa: E501
        :type: str
        """

        self._build_step_id = build_step_id

    @property
    def logs(self):
        """Gets the logs of this StepDto.  # noqa: E501


        :return: The logs of this StepDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this StepDto.


        :param logs: The logs of this StepDto.  # noqa: E501
        :type: list[str]
        """

        self._logs = logs

    @property
    def status(self):
        """Gets the status of this StepDto.  # noqa: E501


        :return: The status of this StepDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StepDto.


        :param status: The status of this StepDto.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StepDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StepDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

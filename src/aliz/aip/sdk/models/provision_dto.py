# coding: utf-8

"""
    Aliz AIP REST API

    AIP Workspace API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: aip-support@aliz.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProvisionDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'provision_id': 'str',
        'created_at': 'datetime',
        'created_by': 'str',
        'commit_id': 'str',
        'branch': 'str',
        'terraform_commit_id': 'str',
        'terraform_branch': 'str',
        'status': 'str'
    }

    attribute_map = {
        'provision_id': 'provisionId',
        'created_at': 'createdAt',
        'created_by': 'createdBy',
        'commit_id': 'commitId',
        'branch': 'branch',
        'terraform_commit_id': 'terraformCommitId',
        'terraform_branch': 'terraformBranch',
        'status': 'status'
    }

    def __init__(self, provision_id=None, created_at=None, created_by=None, commit_id=None, branch=None, terraform_commit_id=None, terraform_branch=None, status=None):  # noqa: E501
        """ProvisionDto - a model defined in Swagger"""  # noqa: E501
        self._provision_id = None
        self._created_at = None
        self._created_by = None
        self._commit_id = None
        self._branch = None
        self._terraform_commit_id = None
        self._terraform_branch = None
        self._status = None
        self.discriminator = None
        if provision_id is not None:
            self.provision_id = provision_id
        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        if commit_id is not None:
            self.commit_id = commit_id
        if branch is not None:
            self.branch = branch
        if terraform_commit_id is not None:
            self.terraform_commit_id = terraform_commit_id
        if terraform_branch is not None:
            self.terraform_branch = terraform_branch
        if status is not None:
            self.status = status

    @property
    def provision_id(self):
        """Gets the provision_id of this ProvisionDto.  # noqa: E501


        :return: The provision_id of this ProvisionDto.  # noqa: E501
        :rtype: str
        """
        return self._provision_id

    @provision_id.setter
    def provision_id(self, provision_id):
        """Sets the provision_id of this ProvisionDto.


        :param provision_id: The provision_id of this ProvisionDto.  # noqa: E501
        :type: str
        """

        self._provision_id = provision_id

    @property
    def created_at(self):
        """Gets the created_at of this ProvisionDto.  # noqa: E501


        :return: The created_at of this ProvisionDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ProvisionDto.


        :param created_at: The created_at of this ProvisionDto.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this ProvisionDto.  # noqa: E501


        :return: The created_by of this ProvisionDto.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ProvisionDto.


        :param created_by: The created_by of this ProvisionDto.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def commit_id(self):
        """Gets the commit_id of this ProvisionDto.  # noqa: E501


        :return: The commit_id of this ProvisionDto.  # noqa: E501
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """Sets the commit_id of this ProvisionDto.


        :param commit_id: The commit_id of this ProvisionDto.  # noqa: E501
        :type: str
        """

        self._commit_id = commit_id

    @property
    def branch(self):
        """Gets the branch of this ProvisionDto.  # noqa: E501


        :return: The branch of this ProvisionDto.  # noqa: E501
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this ProvisionDto.


        :param branch: The branch of this ProvisionDto.  # noqa: E501
        :type: str
        """

        self._branch = branch

    @property
    def terraform_commit_id(self):
        """Gets the terraform_commit_id of this ProvisionDto.  # noqa: E501


        :return: The terraform_commit_id of this ProvisionDto.  # noqa: E501
        :rtype: str
        """
        return self._terraform_commit_id

    @terraform_commit_id.setter
    def terraform_commit_id(self, terraform_commit_id):
        """Sets the terraform_commit_id of this ProvisionDto.


        :param terraform_commit_id: The terraform_commit_id of this ProvisionDto.  # noqa: E501
        :type: str
        """

        self._terraform_commit_id = terraform_commit_id

    @property
    def terraform_branch(self):
        """Gets the terraform_branch of this ProvisionDto.  # noqa: E501


        :return: The terraform_branch of this ProvisionDto.  # noqa: E501
        :rtype: str
        """
        return self._terraform_branch

    @terraform_branch.setter
    def terraform_branch(self, terraform_branch):
        """Sets the terraform_branch of this ProvisionDto.


        :param terraform_branch: The terraform_branch of this ProvisionDto.  # noqa: E501
        :type: str
        """

        self._terraform_branch = terraform_branch

    @property
    def status(self):
        """Gets the status of this ProvisionDto.  # noqa: E501


        :return: The status of this ProvisionDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProvisionDto.


        :param status: The status of this ProvisionDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["RUNNING", "FINISHED", "WAITING_FOR_APPROVAL", "REJECTED", "ERROR"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProvisionDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProvisionDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

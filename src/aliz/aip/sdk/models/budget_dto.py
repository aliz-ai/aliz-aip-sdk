# coding: utf-8

"""
    Aliz AIP REST API

    AIP Workspace API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: aip-support@aliz.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BudgetDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'budget_id': 'str',
        'name': 'str',
        'period': 'str',
        'budget_limit': 'int',
        'notifications': 'list[NotificationDto]',
        'created_at': 'datetime',
        'created_by': 'str',
        'project_dtos': 'list[ProjectDto]',
        'deleted': 'bool'
    }

    attribute_map = {
        'budget_id': 'budgetId',
        'name': 'name',
        'period': 'period',
        'budget_limit': 'budgetLimit',
        'notifications': 'notifications',
        'created_at': 'createdAt',
        'created_by': 'createdBy',
        'project_dtos': 'projectDtos',
        'deleted': 'deleted'
    }

    def __init__(self, budget_id=None, name=None, period=None, budget_limit=None, notifications=None, created_at=None, created_by=None, project_dtos=None, deleted=None):  # noqa: E501
        """BudgetDto - a model defined in Swagger"""  # noqa: E501
        self._budget_id = None
        self._name = None
        self._period = None
        self._budget_limit = None
        self._notifications = None
        self._created_at = None
        self._created_by = None
        self._project_dtos = None
        self._deleted = None
        self.discriminator = None
        if budget_id is not None:
            self.budget_id = budget_id
        self.name = name
        if period is not None:
            self.period = period
        self.budget_limit = budget_limit
        self.notifications = notifications
        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        self.project_dtos = project_dtos
        if deleted is not None:
            self.deleted = deleted

    @property
    def budget_id(self):
        """Gets the budget_id of this BudgetDto.  # noqa: E501


        :return: The budget_id of this BudgetDto.  # noqa: E501
        :rtype: str
        """
        return self._budget_id

    @budget_id.setter
    def budget_id(self, budget_id):
        """Sets the budget_id of this BudgetDto.


        :param budget_id: The budget_id of this BudgetDto.  # noqa: E501
        :type: str
        """

        self._budget_id = budget_id

    @property
    def name(self):
        """Gets the name of this BudgetDto.  # noqa: E501


        :return: The name of this BudgetDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BudgetDto.


        :param name: The name of this BudgetDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def period(self):
        """Gets the period of this BudgetDto.  # noqa: E501


        :return: The period of this BudgetDto.  # noqa: E501
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this BudgetDto.


        :param period: The period of this BudgetDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["MONTHLY"]  # noqa: E501
        if period not in allowed_values:
            raise ValueError(
                "Invalid value for `period` ({0}), must be one of {1}"  # noqa: E501
                .format(period, allowed_values)
            )

        self._period = period

    @property
    def budget_limit(self):
        """Gets the budget_limit of this BudgetDto.  # noqa: E501


        :return: The budget_limit of this BudgetDto.  # noqa: E501
        :rtype: int
        """
        return self._budget_limit

    @budget_limit.setter
    def budget_limit(self, budget_limit):
        """Sets the budget_limit of this BudgetDto.


        :param budget_limit: The budget_limit of this BudgetDto.  # noqa: E501
        :type: int
        """
        if budget_limit is None:
            raise ValueError("Invalid value for `budget_limit`, must not be `None`")  # noqa: E501

        self._budget_limit = budget_limit

    @property
    def notifications(self):
        """Gets the notifications of this BudgetDto.  # noqa: E501


        :return: The notifications of this BudgetDto.  # noqa: E501
        :rtype: list[NotificationDto]
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this BudgetDto.


        :param notifications: The notifications of this BudgetDto.  # noqa: E501
        :type: list[NotificationDto]
        """
        if notifications is None:
            raise ValueError("Invalid value for `notifications`, must not be `None`")  # noqa: E501

        self._notifications = notifications

    @property
    def created_at(self):
        """Gets the created_at of this BudgetDto.  # noqa: E501


        :return: The created_at of this BudgetDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BudgetDto.


        :param created_at: The created_at of this BudgetDto.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this BudgetDto.  # noqa: E501


        :return: The created_by of this BudgetDto.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this BudgetDto.


        :param created_by: The created_by of this BudgetDto.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def project_dtos(self):
        """Gets the project_dtos of this BudgetDto.  # noqa: E501


        :return: The project_dtos of this BudgetDto.  # noqa: E501
        :rtype: list[ProjectDto]
        """
        return self._project_dtos

    @project_dtos.setter
    def project_dtos(self, project_dtos):
        """Sets the project_dtos of this BudgetDto.


        :param project_dtos: The project_dtos of this BudgetDto.  # noqa: E501
        :type: list[ProjectDto]
        """
        if project_dtos is None:
            raise ValueError("Invalid value for `project_dtos`, must not be `None`")  # noqa: E501

        self._project_dtos = project_dtos

    @property
    def deleted(self):
        """Gets the deleted of this BudgetDto.  # noqa: E501


        :return: The deleted of this BudgetDto.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this BudgetDto.


        :param deleted: The deleted of this BudgetDto.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BudgetDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BudgetDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

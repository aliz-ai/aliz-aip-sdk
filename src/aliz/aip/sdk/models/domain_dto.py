# coding: utf-8

"""
    Aliz AIP REST API

    AIP Workspace API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: aip-support@aliz.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DomainDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domain': 'str',
        'service_account': 'str',
        'folder_id': 'str',
        'billing_account_id': 'str',
        'repository': 'GitAuth',
        'repository_organization_name': 'str',
        'gcp_project_prefix': 'str',
        'default_project_limit_amount': 'int',
        'default_project_limit_currency': 'str',
        'domain_limit_amount': 'int',
        'domain_limit_currency': 'str',
        'managed_service_project_limit_amount': 'int',
        'hide_provisioning': 'bool'
    }

    attribute_map = {
        'domain': 'domain',
        'service_account': 'serviceAccount',
        'folder_id': 'folderId',
        'billing_account_id': 'billingAccountId',
        'repository': 'repository',
        'repository_organization_name': 'repositoryOrganizationName',
        'gcp_project_prefix': 'gcpProjectPrefix',
        'default_project_limit_amount': 'defaultProjectLimitAmount',
        'default_project_limit_currency': 'defaultProjectLimitCurrency',
        'domain_limit_amount': 'domainLimitAmount',
        'domain_limit_currency': 'domainLimitCurrency',
        'managed_service_project_limit_amount': 'managedServiceProjectLimitAmount',
        'hide_provisioning': 'hideProvisioning'
    }

    def __init__(self, domain=None, service_account=None, folder_id=None, billing_account_id=None, repository=None, repository_organization_name=None, gcp_project_prefix=None, default_project_limit_amount=None, default_project_limit_currency=None, domain_limit_amount=None, domain_limit_currency=None, managed_service_project_limit_amount=None, hide_provisioning=None):  # noqa: E501
        """DomainDto - a model defined in Swagger"""  # noqa: E501
        self._domain = None
        self._service_account = None
        self._folder_id = None
        self._billing_account_id = None
        self._repository = None
        self._repository_organization_name = None
        self._gcp_project_prefix = None
        self._default_project_limit_amount = None
        self._default_project_limit_currency = None
        self._domain_limit_amount = None
        self._domain_limit_currency = None
        self._managed_service_project_limit_amount = None
        self._hide_provisioning = None
        self.discriminator = None
        self.domain = domain
        self.service_account = service_account
        self.folder_id = folder_id
        self.billing_account_id = billing_account_id
        self.repository = repository
        self.repository_organization_name = repository_organization_name
        self.gcp_project_prefix = gcp_project_prefix
        self.default_project_limit_amount = default_project_limit_amount
        self.default_project_limit_currency = default_project_limit_currency
        self.domain_limit_amount = domain_limit_amount
        self.domain_limit_currency = domain_limit_currency
        self.managed_service_project_limit_amount = managed_service_project_limit_amount
        self.hide_provisioning = hide_provisioning

    @property
    def domain(self):
        """Gets the domain of this DomainDto.  # noqa: E501


        :return: The domain of this DomainDto.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this DomainDto.


        :param domain: The domain of this DomainDto.  # noqa: E501
        :type: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")  # noqa: E501

        self._domain = domain

    @property
    def service_account(self):
        """Gets the service_account of this DomainDto.  # noqa: E501


        :return: The service_account of this DomainDto.  # noqa: E501
        :rtype: str
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this DomainDto.


        :param service_account: The service_account of this DomainDto.  # noqa: E501
        :type: str
        """
        if service_account is None:
            raise ValueError("Invalid value for `service_account`, must not be `None`")  # noqa: E501

        self._service_account = service_account

    @property
    def folder_id(self):
        """Gets the folder_id of this DomainDto.  # noqa: E501


        :return: The folder_id of this DomainDto.  # noqa: E501
        :rtype: str
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this DomainDto.


        :param folder_id: The folder_id of this DomainDto.  # noqa: E501
        :type: str
        """
        if folder_id is None:
            raise ValueError("Invalid value for `folder_id`, must not be `None`")  # noqa: E501

        self._folder_id = folder_id

    @property
    def billing_account_id(self):
        """Gets the billing_account_id of this DomainDto.  # noqa: E501


        :return: The billing_account_id of this DomainDto.  # noqa: E501
        :rtype: str
        """
        return self._billing_account_id

    @billing_account_id.setter
    def billing_account_id(self, billing_account_id):
        """Sets the billing_account_id of this DomainDto.


        :param billing_account_id: The billing_account_id of this DomainDto.  # noqa: E501
        :type: str
        """
        if billing_account_id is None:
            raise ValueError("Invalid value for `billing_account_id`, must not be `None`")  # noqa: E501

        self._billing_account_id = billing_account_id

    @property
    def repository(self):
        """Gets the repository of this DomainDto.  # noqa: E501


        :return: The repository of this DomainDto.  # noqa: E501
        :rtype: GitAuth
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this DomainDto.


        :param repository: The repository of this DomainDto.  # noqa: E501
        :type: GitAuth
        """
        if repository is None:
            raise ValueError("Invalid value for `repository`, must not be `None`")  # noqa: E501

        self._repository = repository

    @property
    def repository_organization_name(self):
        """Gets the repository_organization_name of this DomainDto.  # noqa: E501


        :return: The repository_organization_name of this DomainDto.  # noqa: E501
        :rtype: str
        """
        return self._repository_organization_name

    @repository_organization_name.setter
    def repository_organization_name(self, repository_organization_name):
        """Sets the repository_organization_name of this DomainDto.


        :param repository_organization_name: The repository_organization_name of this DomainDto.  # noqa: E501
        :type: str
        """
        if repository_organization_name is None:
            raise ValueError("Invalid value for `repository_organization_name`, must not be `None`")  # noqa: E501

        self._repository_organization_name = repository_organization_name

    @property
    def gcp_project_prefix(self):
        """Gets the gcp_project_prefix of this DomainDto.  # noqa: E501


        :return: The gcp_project_prefix of this DomainDto.  # noqa: E501
        :rtype: str
        """
        return self._gcp_project_prefix

    @gcp_project_prefix.setter
    def gcp_project_prefix(self, gcp_project_prefix):
        """Sets the gcp_project_prefix of this DomainDto.


        :param gcp_project_prefix: The gcp_project_prefix of this DomainDto.  # noqa: E501
        :type: str
        """
        if gcp_project_prefix is None:
            raise ValueError("Invalid value for `gcp_project_prefix`, must not be `None`")  # noqa: E501

        self._gcp_project_prefix = gcp_project_prefix

    @property
    def default_project_limit_amount(self):
        """Gets the default_project_limit_amount of this DomainDto.  # noqa: E501


        :return: The default_project_limit_amount of this DomainDto.  # noqa: E501
        :rtype: int
        """
        return self._default_project_limit_amount

    @default_project_limit_amount.setter
    def default_project_limit_amount(self, default_project_limit_amount):
        """Sets the default_project_limit_amount of this DomainDto.


        :param default_project_limit_amount: The default_project_limit_amount of this DomainDto.  # noqa: E501
        :type: int
        """
        if default_project_limit_amount is None:
            raise ValueError("Invalid value for `default_project_limit_amount`, must not be `None`")  # noqa: E501

        self._default_project_limit_amount = default_project_limit_amount

    @property
    def default_project_limit_currency(self):
        """Gets the default_project_limit_currency of this DomainDto.  # noqa: E501


        :return: The default_project_limit_currency of this DomainDto.  # noqa: E501
        :rtype: str
        """
        return self._default_project_limit_currency

    @default_project_limit_currency.setter
    def default_project_limit_currency(self, default_project_limit_currency):
        """Sets the default_project_limit_currency of this DomainDto.


        :param default_project_limit_currency: The default_project_limit_currency of this DomainDto.  # noqa: E501
        :type: str
        """
        if default_project_limit_currency is None:
            raise ValueError("Invalid value for `default_project_limit_currency`, must not be `None`")  # noqa: E501

        self._default_project_limit_currency = default_project_limit_currency

    @property
    def domain_limit_amount(self):
        """Gets the domain_limit_amount of this DomainDto.  # noqa: E501


        :return: The domain_limit_amount of this DomainDto.  # noqa: E501
        :rtype: int
        """
        return self._domain_limit_amount

    @domain_limit_amount.setter
    def domain_limit_amount(self, domain_limit_amount):
        """Sets the domain_limit_amount of this DomainDto.


        :param domain_limit_amount: The domain_limit_amount of this DomainDto.  # noqa: E501
        :type: int
        """
        if domain_limit_amount is None:
            raise ValueError("Invalid value for `domain_limit_amount`, must not be `None`")  # noqa: E501

        self._domain_limit_amount = domain_limit_amount

    @property
    def domain_limit_currency(self):
        """Gets the domain_limit_currency of this DomainDto.  # noqa: E501


        :return: The domain_limit_currency of this DomainDto.  # noqa: E501
        :rtype: str
        """
        return self._domain_limit_currency

    @domain_limit_currency.setter
    def domain_limit_currency(self, domain_limit_currency):
        """Sets the domain_limit_currency of this DomainDto.


        :param domain_limit_currency: The domain_limit_currency of this DomainDto.  # noqa: E501
        :type: str
        """
        if domain_limit_currency is None:
            raise ValueError("Invalid value for `domain_limit_currency`, must not be `None`")  # noqa: E501

        self._domain_limit_currency = domain_limit_currency

    @property
    def managed_service_project_limit_amount(self):
        """Gets the managed_service_project_limit_amount of this DomainDto.  # noqa: E501


        :return: The managed_service_project_limit_amount of this DomainDto.  # noqa: E501
        :rtype: int
        """
        return self._managed_service_project_limit_amount

    @managed_service_project_limit_amount.setter
    def managed_service_project_limit_amount(self, managed_service_project_limit_amount):
        """Sets the managed_service_project_limit_amount of this DomainDto.


        :param managed_service_project_limit_amount: The managed_service_project_limit_amount of this DomainDto.  # noqa: E501
        :type: int
        """
        if managed_service_project_limit_amount is None:
            raise ValueError("Invalid value for `managed_service_project_limit_amount`, must not be `None`")  # noqa: E501

        self._managed_service_project_limit_amount = managed_service_project_limit_amount

    @property
    def hide_provisioning(self):
        """Gets the hide_provisioning of this DomainDto.  # noqa: E501


        :return: The hide_provisioning of this DomainDto.  # noqa: E501
        :rtype: bool
        """
        return self._hide_provisioning

    @hide_provisioning.setter
    def hide_provisioning(self, hide_provisioning):
        """Sets the hide_provisioning of this DomainDto.


        :param hide_provisioning: The hide_provisioning of this DomainDto.  # noqa: E501
        :type: bool
        """
        if hide_provisioning is None:
            raise ValueError("Invalid value for `hide_provisioning`, must not be `None`")  # noqa: E501

        self._hide_provisioning = hide_provisioning

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

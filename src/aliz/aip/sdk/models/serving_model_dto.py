# coding: utf-8

"""
    Aliz AIP REST API

    AIP Workspace API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: aip-support@aliz.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServingModelDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'api_url': 'str',
        'model_registry_url': 'str',
        'infrastructure': 'str',
        'status': 'str',
        'versions': 'list[ServingModelVersionDto]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'api_url': 'apiUrl',
        'model_registry_url': 'modelRegistryUrl',
        'infrastructure': 'infrastructure',
        'status': 'status',
        'versions': 'versions'
    }

    def __init__(self, id=None, name=None, api_url=None, model_registry_url=None, infrastructure=None, status=None, versions=None):  # noqa: E501
        """ServingModelDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._api_url = None
        self._model_registry_url = None
        self._infrastructure = None
        self._status = None
        self._versions = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if api_url is not None:
            self.api_url = api_url
        if model_registry_url is not None:
            self.model_registry_url = model_registry_url
        if infrastructure is not None:
            self.infrastructure = infrastructure
        if status is not None:
            self.status = status
        if versions is not None:
            self.versions = versions

    @property
    def id(self):
        """Gets the id of this ServingModelDto.  # noqa: E501


        :return: The id of this ServingModelDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServingModelDto.


        :param id: The id of this ServingModelDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ServingModelDto.  # noqa: E501


        :return: The name of this ServingModelDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServingModelDto.


        :param name: The name of this ServingModelDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def api_url(self):
        """Gets the api_url of this ServingModelDto.  # noqa: E501


        :return: The api_url of this ServingModelDto.  # noqa: E501
        :rtype: str
        """
        return self._api_url

    @api_url.setter
    def api_url(self, api_url):
        """Sets the api_url of this ServingModelDto.


        :param api_url: The api_url of this ServingModelDto.  # noqa: E501
        :type: str
        """

        self._api_url = api_url

    @property
    def model_registry_url(self):
        """Gets the model_registry_url of this ServingModelDto.  # noqa: E501


        :return: The model_registry_url of this ServingModelDto.  # noqa: E501
        :rtype: str
        """
        return self._model_registry_url

    @model_registry_url.setter
    def model_registry_url(self, model_registry_url):
        """Sets the model_registry_url of this ServingModelDto.


        :param model_registry_url: The model_registry_url of this ServingModelDto.  # noqa: E501
        :type: str
        """

        self._model_registry_url = model_registry_url

    @property
    def infrastructure(self):
        """Gets the infrastructure of this ServingModelDto.  # noqa: E501


        :return: The infrastructure of this ServingModelDto.  # noqa: E501
        :rtype: str
        """
        return self._infrastructure

    @infrastructure.setter
    def infrastructure(self, infrastructure):
        """Sets the infrastructure of this ServingModelDto.


        :param infrastructure: The infrastructure of this ServingModelDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["AIP", "VERTEX_AI"]  # noqa: E501
        if infrastructure not in allowed_values:
            raise ValueError(
                "Invalid value for `infrastructure` ({0}), must be one of {1}"  # noqa: E501
                .format(infrastructure, allowed_values)
            )

        self._infrastructure = infrastructure

    @property
    def status(self):
        """Gets the status of this ServingModelDto.  # noqa: E501


        :return: The status of this ServingModelDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ServingModelDto.


        :param status: The status of this ServingModelDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["PENDING", "READY", "FAILED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def versions(self):
        """Gets the versions of this ServingModelDto.  # noqa: E501


        :return: The versions of this ServingModelDto.  # noqa: E501
        :rtype: list[ServingModelVersionDto]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this ServingModelDto.


        :param versions: The versions of this ServingModelDto.  # noqa: E501
        :type: list[ServingModelVersionDto]
        """

        self._versions = versions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServingModelDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServingModelDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

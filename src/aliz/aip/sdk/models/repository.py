# coding: utf-8

"""
    Aliz AIP REST API

    AIP Workspace API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: aip-support@aliz.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Repository(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'template_version': 'TemplateVersion',
        'pull_request_url': 'str',
        'repository_url': 'str',
        'template': 'Template',
        'cookie_cutter_variables': 'CookieCutterContent'
    }

    attribute_map = {
        'template_version': 'templateVersion',
        'pull_request_url': 'pullRequestUrl',
        'repository_url': 'repositoryUrl',
        'template': 'template',
        'cookie_cutter_variables': 'cookieCutterVariables'
    }

    def __init__(self, template_version=None, pull_request_url=None, repository_url=None, template=None, cookie_cutter_variables=None):  # noqa: E501
        """Repository - a model defined in Swagger"""  # noqa: E501
        self._template_version = None
        self._pull_request_url = None
        self._repository_url = None
        self._template = None
        self._cookie_cutter_variables = None
        self.discriminator = None
        if template_version is not None:
            self.template_version = template_version
        if pull_request_url is not None:
            self.pull_request_url = pull_request_url
        if repository_url is not None:
            self.repository_url = repository_url
        if template is not None:
            self.template = template
        if cookie_cutter_variables is not None:
            self.cookie_cutter_variables = cookie_cutter_variables

    @property
    def template_version(self):
        """Gets the template_version of this Repository.  # noqa: E501


        :return: The template_version of this Repository.  # noqa: E501
        :rtype: TemplateVersion
        """
        return self._template_version

    @template_version.setter
    def template_version(self, template_version):
        """Sets the template_version of this Repository.


        :param template_version: The template_version of this Repository.  # noqa: E501
        :type: TemplateVersion
        """

        self._template_version = template_version

    @property
    def pull_request_url(self):
        """Gets the pull_request_url of this Repository.  # noqa: E501

        Pull request url  # noqa: E501

        :return: The pull_request_url of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._pull_request_url

    @pull_request_url.setter
    def pull_request_url(self, pull_request_url):
        """Sets the pull_request_url of this Repository.

        Pull request url  # noqa: E501

        :param pull_request_url: The pull_request_url of this Repository.  # noqa: E501
        :type: str
        """

        self._pull_request_url = pull_request_url

    @property
    def repository_url(self):
        """Gets the repository_url of this Repository.  # noqa: E501

        Generated repository url  # noqa: E501

        :return: The repository_url of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._repository_url

    @repository_url.setter
    def repository_url(self, repository_url):
        """Sets the repository_url of this Repository.

        Generated repository url  # noqa: E501

        :param repository_url: The repository_url of this Repository.  # noqa: E501
        :type: str
        """

        self._repository_url = repository_url

    @property
    def template(self):
        """Gets the template of this Repository.  # noqa: E501


        :return: The template of this Repository.  # noqa: E501
        :rtype: Template
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this Repository.


        :param template: The template of this Repository.  # noqa: E501
        :type: Template
        """

        self._template = template

    @property
    def cookie_cutter_variables(self):
        """Gets the cookie_cutter_variables of this Repository.  # noqa: E501


        :return: The cookie_cutter_variables of this Repository.  # noqa: E501
        :rtype: CookieCutterContent
        """
        return self._cookie_cutter_variables

    @cookie_cutter_variables.setter
    def cookie_cutter_variables(self, cookie_cutter_variables):
        """Sets the cookie_cutter_variables of this Repository.


        :param cookie_cutter_variables: The cookie_cutter_variables of this Repository.  # noqa: E501
        :type: CookieCutterContent
        """

        self._cookie_cutter_variables = cookie_cutter_variables

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Repository, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Repository):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

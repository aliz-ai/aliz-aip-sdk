# coding: utf-8

"""
    Aliz AIP REST API

    AIP Workspace API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: aip-support@aliz.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelMetadataDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unified_model_id': 'str',
        'name': 'str',
        'creator': 'str',
        'description': 'str',
        'model_type': 'str',
        'evaluation_metric': 'str',
        'model_periodicity': 'str',
        'model_registry_link': 'str',
        'created_date': 'datetime',
        'last_updated_date': 'datetime',
        'version': 'str',
        'api_link': 'str'
    }

    attribute_map = {
        'unified_model_id': 'unifiedModelId',
        'name': 'name',
        'creator': 'creator',
        'description': 'description',
        'model_type': 'modelType',
        'evaluation_metric': 'evaluationMetric',
        'model_periodicity': 'modelPeriodicity',
        'model_registry_link': 'modelRegistryLink',
        'created_date': 'createdDate',
        'last_updated_date': 'lastUpdatedDate',
        'version': 'version',
        'api_link': 'apiLink'
    }

    def __init__(self, unified_model_id=None, name=None, creator=None, description=None, model_type=None, evaluation_metric=None, model_periodicity=None, model_registry_link=None, created_date=None, last_updated_date=None, version=None, api_link=None):  # noqa: E501
        """ModelMetadataDto - a model defined in Swagger"""  # noqa: E501
        self._unified_model_id = None
        self._name = None
        self._creator = None
        self._description = None
        self._model_type = None
        self._evaluation_metric = None
        self._model_periodicity = None
        self._model_registry_link = None
        self._created_date = None
        self._last_updated_date = None
        self._version = None
        self._api_link = None
        self.discriminator = None
        if unified_model_id is not None:
            self.unified_model_id = unified_model_id
        if name is not None:
            self.name = name
        if creator is not None:
            self.creator = creator
        if description is not None:
            self.description = description
        if model_type is not None:
            self.model_type = model_type
        if evaluation_metric is not None:
            self.evaluation_metric = evaluation_metric
        if model_periodicity is not None:
            self.model_periodicity = model_periodicity
        if model_registry_link is not None:
            self.model_registry_link = model_registry_link
        if created_date is not None:
            self.created_date = created_date
        if last_updated_date is not None:
            self.last_updated_date = last_updated_date
        if version is not None:
            self.version = version
        if api_link is not None:
            self.api_link = api_link

    @property
    def unified_model_id(self):
        """Gets the unified_model_id of this ModelMetadataDto.  # noqa: E501


        :return: The unified_model_id of this ModelMetadataDto.  # noqa: E501
        :rtype: str
        """
        return self._unified_model_id

    @unified_model_id.setter
    def unified_model_id(self, unified_model_id):
        """Sets the unified_model_id of this ModelMetadataDto.


        :param unified_model_id: The unified_model_id of this ModelMetadataDto.  # noqa: E501
        :type: str
        """

        self._unified_model_id = unified_model_id

    @property
    def name(self):
        """Gets the name of this ModelMetadataDto.  # noqa: E501


        :return: The name of this ModelMetadataDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelMetadataDto.


        :param name: The name of this ModelMetadataDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def creator(self):
        """Gets the creator of this ModelMetadataDto.  # noqa: E501


        :return: The creator of this ModelMetadataDto.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this ModelMetadataDto.


        :param creator: The creator of this ModelMetadataDto.  # noqa: E501
        :type: str
        """

        self._creator = creator

    @property
    def description(self):
        """Gets the description of this ModelMetadataDto.  # noqa: E501


        :return: The description of this ModelMetadataDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModelMetadataDto.


        :param description: The description of this ModelMetadataDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def model_type(self):
        """Gets the model_type of this ModelMetadataDto.  # noqa: E501


        :return: The model_type of this ModelMetadataDto.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this ModelMetadataDto.


        :param model_type: The model_type of this ModelMetadataDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["REGRESSION", "CLASSIFICATION"]  # noqa: E501
        if model_type not in allowed_values:
            raise ValueError(
                "Invalid value for `model_type` ({0}), must be one of {1}"  # noqa: E501
                .format(model_type, allowed_values)
            )

        self._model_type = model_type

    @property
    def evaluation_metric(self):
        """Gets the evaluation_metric of this ModelMetadataDto.  # noqa: E501


        :return: The evaluation_metric of this ModelMetadataDto.  # noqa: E501
        :rtype: str
        """
        return self._evaluation_metric

    @evaluation_metric.setter
    def evaluation_metric(self, evaluation_metric):
        """Sets the evaluation_metric of this ModelMetadataDto.


        :param evaluation_metric: The evaluation_metric of this ModelMetadataDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["MSE"]  # noqa: E501
        if evaluation_metric not in allowed_values:
            raise ValueError(
                "Invalid value for `evaluation_metric` ({0}), must be one of {1}"  # noqa: E501
                .format(evaluation_metric, allowed_values)
            )

        self._evaluation_metric = evaluation_metric

    @property
    def model_periodicity(self):
        """Gets the model_periodicity of this ModelMetadataDto.  # noqa: E501


        :return: The model_periodicity of this ModelMetadataDto.  # noqa: E501
        :rtype: str
        """
        return self._model_periodicity

    @model_periodicity.setter
    def model_periodicity(self, model_periodicity):
        """Sets the model_periodicity of this ModelMetadataDto.


        :param model_periodicity: The model_periodicity of this ModelMetadataDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["DAY", "WEEK", "MONTH"]  # noqa: E501
        if model_periodicity not in allowed_values:
            raise ValueError(
                "Invalid value for `model_periodicity` ({0}), must be one of {1}"  # noqa: E501
                .format(model_periodicity, allowed_values)
            )

        self._model_periodicity = model_periodicity

    @property
    def model_registry_link(self):
        """Gets the model_registry_link of this ModelMetadataDto.  # noqa: E501


        :return: The model_registry_link of this ModelMetadataDto.  # noqa: E501
        :rtype: str
        """
        return self._model_registry_link

    @model_registry_link.setter
    def model_registry_link(self, model_registry_link):
        """Sets the model_registry_link of this ModelMetadataDto.


        :param model_registry_link: The model_registry_link of this ModelMetadataDto.  # noqa: E501
        :type: str
        """

        self._model_registry_link = model_registry_link

    @property
    def created_date(self):
        """Gets the created_date of this ModelMetadataDto.  # noqa: E501


        :return: The created_date of this ModelMetadataDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this ModelMetadataDto.


        :param created_date: The created_date of this ModelMetadataDto.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def last_updated_date(self):
        """Gets the last_updated_date of this ModelMetadataDto.  # noqa: E501


        :return: The last_updated_date of this ModelMetadataDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated_date

    @last_updated_date.setter
    def last_updated_date(self, last_updated_date):
        """Sets the last_updated_date of this ModelMetadataDto.


        :param last_updated_date: The last_updated_date of this ModelMetadataDto.  # noqa: E501
        :type: datetime
        """

        self._last_updated_date = last_updated_date

    @property
    def version(self):
        """Gets the version of this ModelMetadataDto.  # noqa: E501


        :return: The version of this ModelMetadataDto.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ModelMetadataDto.


        :param version: The version of this ModelMetadataDto.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def api_link(self):
        """Gets the api_link of this ModelMetadataDto.  # noqa: E501


        :return: The api_link of this ModelMetadataDto.  # noqa: E501
        :rtype: str
        """
        return self._api_link

    @api_link.setter
    def api_link(self, api_link):
        """Sets the api_link of this ModelMetadataDto.


        :param api_link: The api_link of this ModelMetadataDto.  # noqa: E501
        :type: str
        """

        self._api_link = api_link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelMetadataDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelMetadataDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Aliz AIP REST API

    AIP Workspace API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: aip-support@aliz.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from aliz.aip.sdk.api_client import ApiClient


class BudgetControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_budget(self, body, workspace_id, **kwargs):  # noqa: E501
        """create_budget  # noqa: E501

        Create budget within a workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_budget(body, workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BudgetDto body: (required)
        :param str workspace_id: ID of the workspace from where to role will be created (required)
        :return: BudgetDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_budget_with_http_info(body, workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_budget_with_http_info(body, workspace_id, **kwargs)  # noqa: E501
            return data

    def create_budget_with_http_info(self, body, workspace_id, **kwargs):  # noqa: E501
        """create_budget  # noqa: E501

        Create budget within a workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_budget_with_http_info(body, workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BudgetDto body: (required)
        :param str workspace_id: ID of the workspace from where to role will be created (required)
        :return: BudgetDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_budget" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_budget`")  # noqa: E501
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `create_budget`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer-key']  # noqa: E501

        return self.api_client.call_api(
            '/api/budget/v1/workspaces/{workspaceId}/budgets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BudgetDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_budget(self, workspace_id, budget_id, **kwargs):  # noqa: E501
        """delete_budget  # noqa: E501

        Delete budget within a workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_budget(workspace_id, budget_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: ID of the workspace from where to role will be deleted (required)
        :param str budget_id: ID of the budget to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_budget_with_http_info(workspace_id, budget_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_budget_with_http_info(workspace_id, budget_id, **kwargs)  # noqa: E501
            return data

    def delete_budget_with_http_info(self, workspace_id, budget_id, **kwargs):  # noqa: E501
        """delete_budget  # noqa: E501

        Delete budget within a workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_budget_with_http_info(workspace_id, budget_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: ID of the workspace from where to role will be deleted (required)
        :param str budget_id: ID of the budget to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'budget_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_budget" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `delete_budget`")  # noqa: E501
        # verify the required parameter 'budget_id' is set
        if ('budget_id' not in params or
                params['budget_id'] is None):
            raise ValueError("Missing the required parameter `budget_id` when calling `delete_budget`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']  # noqa: E501
        if 'budget_id' in params:
            path_params['budgetId'] = params['budget_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearer-key']  # noqa: E501

        return self.api_client.call_api(
            '/api/budget/v1/workspaces/{workspaceId}/budgets/{budgetId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_budget(self, body, workspace_id, budget_id, **kwargs):  # noqa: E501
        """edit_budget  # noqa: E501

        Update budget within a workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_budget(body, workspace_id, budget_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BudgetDto body: (required)
        :param str workspace_id: ID of the workspace from where to role will be updated (required)
        :param str budget_id: ID of the budget being edited (required)
        :return: BudgetDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_budget_with_http_info(body, workspace_id, budget_id, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_budget_with_http_info(body, workspace_id, budget_id, **kwargs)  # noqa: E501
            return data

    def edit_budget_with_http_info(self, body, workspace_id, budget_id, **kwargs):  # noqa: E501
        """edit_budget  # noqa: E501

        Update budget within a workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_budget_with_http_info(body, workspace_id, budget_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BudgetDto body: (required)
        :param str workspace_id: ID of the workspace from where to role will be updated (required)
        :param str budget_id: ID of the budget being edited (required)
        :return: BudgetDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace_id', 'budget_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_budget" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edit_budget`")  # noqa: E501
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `edit_budget`")  # noqa: E501
        # verify the required parameter 'budget_id' is set
        if ('budget_id' not in params or
                params['budget_id'] is None):
            raise ValueError("Missing the required parameter `budget_id` when calling `edit_budget`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']  # noqa: E501
        if 'budget_id' in params:
            path_params['budgetId'] = params['budget_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer-key']  # noqa: E501

        return self.api_client.call_api(
            '/api/budget/v1/workspaces/{workspaceId}/budgets/{budgetId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BudgetDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_budget(self, workspace_id, budget_id, **kwargs):  # noqa: E501
        """get_budget  # noqa: E501

        Retrieves a given budget within a workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_budget(workspace_id, budget_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: ID of the workspace from where to role will be queried (required)
        :param str budget_id: ID of budget will be deleted (required)
        :return: BudgetDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_budget_with_http_info(workspace_id, budget_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_budget_with_http_info(workspace_id, budget_id, **kwargs)  # noqa: E501
            return data

    def get_budget_with_http_info(self, workspace_id, budget_id, **kwargs):  # noqa: E501
        """get_budget  # noqa: E501

        Retrieves a given budget within a workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_budget_with_http_info(workspace_id, budget_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: ID of the workspace from where to role will be queried (required)
        :param str budget_id: ID of budget will be deleted (required)
        :return: BudgetDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'budget_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_budget" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_budget`")  # noqa: E501
        # verify the required parameter 'budget_id' is set
        if ('budget_id' not in params or
                params['budget_id'] is None):
            raise ValueError("Missing the required parameter `budget_id` when calling `get_budget`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']  # noqa: E501
        if 'budget_id' in params:
            path_params['budgetId'] = params['budget_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer-key']  # noqa: E501

        return self.api_client.call_api(
            '/api/budget/v1/workspaces/{workspaceId}/budgets/{budgetId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BudgetDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_budget_alerts(self, domain_id, pageable, **kwargs):  # noqa: E501
        """get_budget_alerts  # noqa: E501

        Retrieves a list of unfiltered budget alerts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_budget_alerts(domain_id, pageable, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_id: ID of the workspace from where to role will be deleted (required)
        :param Pageable pageable: Paging properties (required)
        :return: PageBudgetAlertDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_budget_alerts_with_http_info(domain_id, pageable, **kwargs)  # noqa: E501
        else:
            (data) = self.get_budget_alerts_with_http_info(domain_id, pageable, **kwargs)  # noqa: E501
            return data

    def get_budget_alerts_with_http_info(self, domain_id, pageable, **kwargs):  # noqa: E501
        """get_budget_alerts  # noqa: E501

        Retrieves a list of unfiltered budget alerts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_budget_alerts_with_http_info(domain_id, pageable, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_id: ID of the workspace from where to role will be deleted (required)
        :param Pageable pageable: Paging properties (required)
        :return: PageBudgetAlertDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_id', 'pageable']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_budget_alerts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_id' is set
        if ('domain_id' not in params or
                params['domain_id'] is None):
            raise ValueError("Missing the required parameter `domain_id` when calling `get_budget_alerts`")  # noqa: E501
        # verify the required parameter 'pageable' is set
        if ('pageable' not in params or
                params['pageable'] is None):
            raise ValueError("Missing the required parameter `pageable` when calling `get_budget_alerts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_id' in params:
            path_params['domainId'] = params['domain_id']  # noqa: E501

        query_params = []
        if 'pageable' in params:
            query_params.append(('pageable', params['pageable']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer-key']  # noqa: E501

        return self.api_client.call_api(
            '/api/budget/v1/domains/{domainId}/alerts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageBudgetAlertDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_budget_alerts_for_workspace(self, workspace_id, pageable, **kwargs):  # noqa: E501
        """get_budget_alerts_for_workspace  # noqa: E501

        Retrieves a list of budget alerts for a given workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_budget_alerts_for_workspace(workspace_id, pageable, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: ID of the workspace from where to role will be deleted (required)
        :param Pageable pageable: Paging properties (required)
        :return: PageBudgetAlertDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_budget_alerts_for_workspace_with_http_info(workspace_id, pageable, **kwargs)  # noqa: E501
        else:
            (data) = self.get_budget_alerts_for_workspace_with_http_info(workspace_id, pageable, **kwargs)  # noqa: E501
            return data

    def get_budget_alerts_for_workspace_with_http_info(self, workspace_id, pageable, **kwargs):  # noqa: E501
        """get_budget_alerts_for_workspace  # noqa: E501

        Retrieves a list of budget alerts for a given workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_budget_alerts_for_workspace_with_http_info(workspace_id, pageable, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: ID of the workspace from where to role will be deleted (required)
        :param Pageable pageable: Paging properties (required)
        :return: PageBudgetAlertDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'pageable']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_budget_alerts_for_workspace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_budget_alerts_for_workspace`")  # noqa: E501
        # verify the required parameter 'pageable' is set
        if ('pageable' not in params or
                params['pageable'] is None):
            raise ValueError("Missing the required parameter `pageable` when calling `get_budget_alerts_for_workspace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']  # noqa: E501

        query_params = []
        if 'pageable' in params:
            query_params.append(('pageable', params['pageable']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer-key']  # noqa: E501

        return self.api_client.call_api(
            '/api/budget/v1/workspaces/{workspaceId}/alerts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageBudgetAlertDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_budgets(self, workspace_id, **kwargs):  # noqa: E501
        """get_budgets  # noqa: E501

        Retrieves the list of budgets within the workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_budgets(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: ID of the workspace from where to role will be queried (required)
        :param bool show_deleted: Show deleted workspaces too
        :return: list[BudgetDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_budgets_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_budgets_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def get_budgets_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """get_budgets  # noqa: E501

        Retrieves the list of budgets within the workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_budgets_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: ID of the workspace from where to role will be queried (required)
        :param bool show_deleted: Show deleted workspaces too
        :return: list[BudgetDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'show_deleted']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_budgets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_budgets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']  # noqa: E501

        query_params = []
        if 'show_deleted' in params:
            query_params.append(('showDeleted', params['show_deleted']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer-key']  # noqa: E501

        return self.api_client.call_api(
            '/api/budget/v1/workspaces/{workspaceId}/budgets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BudgetDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

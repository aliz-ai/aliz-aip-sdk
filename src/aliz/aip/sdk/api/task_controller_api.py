# coding: utf-8

"""
    Aliz AIP REST API

    AIP Workspace API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: aip-support@aliz.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from aliz.aip.sdk.api_client import ApiClient


class TaskControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def drop_task(self, workspace_id, task_id, **kwargs):  # noqa: E501
        """drop_task  # noqa: E501

        Drop task  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.drop_task(workspace_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace id (required)
        :param str task_id: (required)
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.drop_task_with_http_info(workspace_id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.drop_task_with_http_info(workspace_id, task_id, **kwargs)  # noqa: E501
            return data

    def drop_task_with_http_info(self, workspace_id, task_id, **kwargs):  # noqa: E501
        """drop_task  # noqa: E501

        Drop task  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.drop_task_with_http_info(workspace_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace id (required)
        :param str task_id: (required)
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method drop_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `drop_task`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `drop_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer-key']  # noqa: E501

        return self.api_client.call_api(
            '/api/task/v1/workspaces/{workspaceId}/tasks/{taskId}/drop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Task',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def finish_task(self, workspace_id, task_status, task_id, **kwargs):  # noqa: E501
        """finish_task  # noqa: E501

        Finish task  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.finish_task(workspace_id, task_status, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace id (required)
        :param str task_status: (required)
        :param str task_id: (required)
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.finish_task_with_http_info(workspace_id, task_status, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.finish_task_with_http_info(workspace_id, task_status, task_id, **kwargs)  # noqa: E501
            return data

    def finish_task_with_http_info(self, workspace_id, task_status, task_id, **kwargs):  # noqa: E501
        """finish_task  # noqa: E501

        Finish task  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.finish_task_with_http_info(workspace_id, task_status, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace id (required)
        :param str task_status: (required)
        :param str task_id: (required)
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'task_status', 'task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method finish_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `finish_task`")  # noqa: E501
        # verify the required parameter 'task_status' is set
        if ('task_status' not in params or
                params['task_status'] is None):
            raise ValueError("Missing the required parameter `task_status` when calling `finish_task`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `finish_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']  # noqa: E501
        if 'task_status' in params:
            path_params['taskStatus'] = params['task_status']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer-key']  # noqa: E501

        return self.api_client.call_api(
            '/api/task/v1/workspaces/{workspaceId}/tasks/{taskId}/status/{taskStatus}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Task',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_task_by_reference_id(self, workspace_id, reference_id, **kwargs):  # noqa: E501
        """get_task_by_reference_id  # noqa: E501

        Get task by reference id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_by_reference_id(workspace_id, reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace id (required)
        :param str reference_id: (required)
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_task_by_reference_id_with_http_info(workspace_id, reference_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_task_by_reference_id_with_http_info(workspace_id, reference_id, **kwargs)  # noqa: E501
            return data

    def get_task_by_reference_id_with_http_info(self, workspace_id, reference_id, **kwargs):  # noqa: E501
        """get_task_by_reference_id  # noqa: E501

        Get task by reference id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_by_reference_id_with_http_info(workspace_id, reference_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace id (required)
        :param str reference_id: (required)
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'reference_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_task_by_reference_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_task_by_reference_id`")  # noqa: E501
        # verify the required parameter 'reference_id' is set
        if ('reference_id' not in params or
                params['reference_id'] is None):
            raise ValueError("Missing the required parameter `reference_id` when calling `get_task_by_reference_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']  # noqa: E501
        if 'reference_id' in params:
            path_params['referenceId'] = params['reference_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer-key']  # noqa: E501

        return self.api_client.call_api(
            '/api/task/v1/workspaces/{workspaceId}/references/{referenceId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Task',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_task_types(self, **kwargs):  # noqa: E501
        """get_task_types  # noqa: E501

        Gets task type list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[TaskType]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_task_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_task_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_task_types_with_http_info(self, **kwargs):  # noqa: E501
        """get_task_types  # noqa: E501

        Gets task type list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[TaskType]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_task_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer-key']  # noqa: E501

        return self.api_client.call_api(
            '/api/task/v1/types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TaskType]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tasks(self, show_completed, workspace_id, **kwargs):  # noqa: E501
        """get_tasks  # noqa: E501

        Gets tasks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tasks(show_completed, workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool show_completed: Show completed (required)
        :param str workspace_id: Task workspace (required)
        :param str task_type: Task type
        :param str task_status: Task status
        :return: list[Task]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tasks_with_http_info(show_completed, workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tasks_with_http_info(show_completed, workspace_id, **kwargs)  # noqa: E501
            return data

    def get_tasks_with_http_info(self, show_completed, workspace_id, **kwargs):  # noqa: E501
        """get_tasks  # noqa: E501

        Gets tasks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tasks_with_http_info(show_completed, workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool show_completed: Show completed (required)
        :param str workspace_id: Task workspace (required)
        :param str task_type: Task type
        :param str task_status: Task status
        :return: list[Task]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['show_completed', 'workspace_id', 'task_type', 'task_status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tasks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'show_completed' is set
        if ('show_completed' not in params or
                params['show_completed'] is None):
            raise ValueError("Missing the required parameter `show_completed` when calling `get_tasks`")  # noqa: E501
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_tasks`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']  # noqa: E501

        query_params = []
        if 'task_type' in params:
            query_params.append(('taskType', params['task_type']))  # noqa: E501
        if 'task_status' in params:
            query_params.append(('taskStatus', params['task_status']))  # noqa: E501
        if 'show_completed' in params:
            query_params.append(('showCompleted', params['show_completed']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer-key']  # noqa: E501

        return self.api_client.call_api(
            '/api/task/v1/workspaces/{workspaceId}/tasks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Task]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def save_tasks(self, body, workspace_id, **kwargs):  # noqa: E501
        """save_tasks  # noqa: E501

        Save or update task  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_tasks(body, workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Task body: (required)
        :param str workspace_id: Workspace id (required)
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.save_tasks_with_http_info(body, workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.save_tasks_with_http_info(body, workspace_id, **kwargs)  # noqa: E501
            return data

    def save_tasks_with_http_info(self, body, workspace_id, **kwargs):  # noqa: E501
        """save_tasks  # noqa: E501

        Save or update task  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_tasks_with_http_info(body, workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Task body: (required)
        :param str workspace_id: Workspace id (required)
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_tasks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `save_tasks`")  # noqa: E501
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `save_tasks`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer-key']  # noqa: E501

        return self.api_client.call_api(
            '/api/task/v1/workspaces/{workspaceId}/tasks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Task',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def take_task(self, workspace_id, task_id, **kwargs):  # noqa: E501
        """take_task  # noqa: E501

        Take task  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.take_task(workspace_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace id (required)
        :param str task_id: (required)
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.take_task_with_http_info(workspace_id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.take_task_with_http_info(workspace_id, task_id, **kwargs)  # noqa: E501
            return data

    def take_task_with_http_info(self, workspace_id, task_id, **kwargs):  # noqa: E501
        """take_task  # noqa: E501

        Take task  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.take_task_with_http_info(workspace_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace id (required)
        :param str task_id: (required)
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method take_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `take_task`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `take_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer-key']  # noqa: E501

        return self.api_client.call_api(
            '/api/task/v1/workspaces/{workspaceId}/tasks/{taskId}/take', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Task',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
